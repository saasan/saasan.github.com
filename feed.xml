<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>saasan.github.io</title>
        <description></description>
        <link>https://saasan.github.io/</link>
        <atom:link href="https://saasan.github.io/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Mon, 06 Mar 2023 15:20:58 +0900</pubDate>
        <lastBuildDate>Mon, 06 Mar 2023 15:20:58 +0900</lastBuildDate>
        <generator>Jekyll v4.2.2</generator>
        
            <item>
                <title>Stable Diffusion を Windows 10 へインストールする方法と使い方、画像生成のコツ</title>
                <description>&lt;p&gt;Stable Diffusion を Windows 10 のローカル環境へインストールする方法と使い方、
1ヶ月ほど使ってみて分かった画像生成のコツをメモしておく。&lt;/p&gt;

&lt;h2 id=&quot;実行環境&quot;&gt;実行環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows 10 Pro 22H2&lt;/li&gt;
  &lt;li&gt;GPU: &lt;a href=&quot;https://www.amazon.co.jp/dp/B08WPJ5P4R/?tag=saasan-22&quot;&gt;MSI GeForce RTX 3060 GAMING X 12G&lt;/a&gt; (VRAM 12 GB 版 NVIDIA GeForce RTX 3060)&lt;/li&gt;
  &lt;li&gt;CPU: &lt;a href=&quot;https://www.amazon.co.jp/dp/B08166SLDF/?tag=saasan-22&quot;&gt;AMD Ryzen 5 5600X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;メモリ: 32 GB&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B08WPJ5P4R&amp;amp;linkId=a74f3cec7df215d727c5d4aae026eeb5&quot;&gt;&lt;/iframe&gt;
&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B08166SLDF&amp;amp;linkId=b75f07c2f52a0fa7123b5861e11649b6&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;ドライバー等は最新のものを使用。
あくまでも私が実行した環境のためこのスペックを満たしている必要はない。&lt;/p&gt;

&lt;p&gt;Stable Diffusion web UI は VRAM 4 GB 以上をサポートしているが、
GPU と VRAM の容量は画像生成速度と解像度に影響するため高性能なものが望ましい。&lt;/p&gt;

&lt;p&gt;また、Stable Diffusion は NVIDIA 製 GPU で動かす前提となっている。
AMD や Intel 製 GPU に対応させたものもあるようだが以下の手順では使えない。&lt;/p&gt;

&lt;h2 id=&quot;cuda-toolkit-のインストール&quot;&gt;CUDA Toolkit のインストール&lt;/h2&gt;

&lt;p&gt;Stable Diffusion に限らず、NVIDIA の GPU で機械学習やディープラーニングを行うには
CUDA という並列計算のライブラリが必要。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;NVIDIA の公式サイト&lt;/a&gt;
から CUDA Toolkit をダウンロードしインストールする。&lt;/p&gt;

&lt;h2 id=&quot;python-git-のインストール&quot;&gt;Python, Git のインストール&lt;/h2&gt;

&lt;p&gt;Stable Diffusion web UI (以下 web UI と略す) を利用するのが楽なので、
これを動かすのに必要な Python, Git をインストールする。&lt;/p&gt;

&lt;h3 id=&quot;python-のインストール&quot;&gt;Python のインストール&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;3.11 系では web UI が動作しないため必ず 3.10 系をインストールすること。&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/windows/&quot;&gt;Python の公式サイト&lt;/a&gt; から Python 3.10.x をダウンロードする。&lt;br /&gt;
現在は 3.10.10 が最新のため「Stable Releases」の「Python 3.10.10 - Feb. 8, 2023」にある
「Windows installer (64-bit)」をクリックしてダウンロードすればよい。&lt;/li&gt;
  &lt;li&gt;ダウンロードしたファイルをダブルクリックしてインストーラーを起動する。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;「Add python.exe to PATH」にチェックを入れる。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;「Install Now」をクリックしインストールする。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;git-のインストール&quot;&gt;Git のインストール&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;Git の公式サイト&lt;/a&gt; から 64-bit Git for Windows Setup をダウンロードする。&lt;/li&gt;
  &lt;li&gt;ダウンロードしたファイルをダブルクリックしてインストーラーを起動する。&lt;/li&gt;
  &lt;li&gt;英語で色々聞かれるが全部「Next」をクリックして進める。&lt;/li&gt;
  &lt;li&gt;最後に「Install」すればとりあえず使える状態になる。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;stable-diffusion-web-ui-のインストール&quot;&gt;Stable Diffusion web UI のインストール&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AUTOMATIC1111/stable-diffusion-webui&quot;&gt;Stable Diffusion web UI のページ&lt;/a&gt;
から「Code &amp;gt; Download ZIP」でファイルをダウンロードする。&lt;br /&gt;
Git を使える人は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; してもよい。&lt;/li&gt;
  &lt;li&gt;ダウンロードした ZIP ファイルを展開する。&lt;br /&gt;
展開したフォルダがそのままインストール先となるため、インストールしたいフォルダに展開すればよい。&lt;/li&gt;
  &lt;li&gt;展開したフォルダにある「webui-user.bat」を右クリックしてプロパティをクリックする。&lt;/li&gt;
  &lt;li&gt;プロパティ下部「セキュリティ」の右にある「許可する」にチェックを入れて OK をクリックする。&lt;/li&gt;
  &lt;li&gt;「webui-user.bat」をダブルクリックして起動する。 (管理者ではない一般ユーザーで実行してよい)&lt;/li&gt;
  &lt;li&gt;必要なファイルが自動でダウンロード・インストールされるため完了するまで待つ。&lt;/li&gt;
  &lt;li&gt;インストールと起動が完了したら &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Running on local URL:  http://127.0.0.1:7860&lt;/code&gt; が表示される。&lt;/li&gt;
  &lt;li&gt;ブラウザで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:7860&lt;/code&gt; を開く。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;web-ui-起動時にエラーが発生する場合&quot;&gt;web UI 起動時にエラーが発生する場合&lt;/h2&gt;

&lt;h3 id=&quot;runtimeerror-cannot-add-middleware-after-an-application-has-started&quot;&gt;RuntimeError: Cannot add middleware after an application has started.&lt;/h3&gt;

&lt;p&gt;web UI のバージョンによっては webui-user.bat を起動後に以下のエラーが表示される。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RuntimeError: Cannot add middleware after an application has started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合はコマンドプロンプトで以下を実行してから再度 webui-user.bat を起動する。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [web UIのインストール先パス]
venv\Scripts\activate.bat
pip install --upgrade fastapi==0.90.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;loading-stable-diffusion-model-outofmemoryerror-や-torchcudaoutofmemoryerror-cuda-out-of-memory&quot;&gt;loading stable diffusion model: OutOfMemoryError や torch.cuda.OutOfMemoryError: CUDA out of memory.&lt;/h3&gt;

&lt;p&gt;VRAM が不足しているときに表示される。&lt;br /&gt;
webui-user.bat を起動する前にタスクマネージャーを起動しておき、
「パフォーマンス」タブで GPU の「専用 GPU メモリ使用量」が 100% になっていないか確認するとよい。&lt;/p&gt;

&lt;p&gt;VRAM が不足している場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--lowvram&lt;/code&gt; オプションを指定することで起動できる場合がある。&lt;br /&gt;
「webui-user.bat」をテキストエディタで開き&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;となっている部分を以下のように変更し保存する。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=--lowvram
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;テキストからの画像生成-txt2img&quot;&gt;テキストからの画像生成 (txt2img)&lt;/h2&gt;

&lt;p&gt;web UI の URL を開くと txt2img の画面となる。
txt2img は文章、単語などの言葉から画像を生成できる。&lt;/p&gt;

&lt;h3 id=&quot;prompt-negative-prompt&quot;&gt;Prompt, Negative prompt&lt;/h3&gt;

&lt;p&gt;Prompt へ描かせたいもの、Negative prompt へ描かせたくないものを英語で入力し、
「Generate」をクリックすれば画像が生成される。
複数の要素を指定したい場合はカンマ (,) 区切りで入力する。&lt;/p&gt;

&lt;p&gt;定番の「馬に乗った宇宙飛行士の写真」を生成させるなら Prompt へ以下を入力すればよい。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a photograph of an astronaut riding a horse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; または &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; で言葉を囲むことで強調/抑制できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(言葉)&lt;/code&gt;: 1.1倍強調&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;((言葉))&lt;/code&gt;: 1.21倍強調 (= 1.1×1.1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[言葉]&lt;/code&gt;: 1.1倍抑制&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(言葉:1.5)&lt;/code&gt;: 1.5倍強調&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#attentionemphasis&quot;&gt;Attention/emphasis&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;generate--interrupt--skip&quot;&gt;Generate / Interrupt / Skip&lt;/h3&gt;

&lt;p&gt;前述の通り、「Generate」をクリックすると画像の生成が開始される。&lt;/p&gt;

&lt;p&gt;生成が始まると Interrupt / Skip ボタンに変化する。
Interrupt で生成を中断し終了する。
Skip は後述の Batch で複数枚生成している場合に、現在生成しているものをスキップできる。&lt;/p&gt;

&lt;h3 id=&quot;生成画像の出力先&quot;&gt;生成画像の出力先&lt;/h3&gt;

&lt;p&gt;生成後に画像下のフォルダボタンをクリックすると、出力先の outputs\txt2img-images フォルダが開かれる。&lt;/p&gt;

&lt;p&gt;Save ボタンをクリックすると log\images フォルダにコピーが保存される。&lt;/p&gt;

&lt;h2 id=&quot;txt2img-の設定項目&quot;&gt;txt2img の設定項目&lt;/h2&gt;

&lt;h3 id=&quot;width-height&quot;&gt;Width, Height&lt;/h3&gt;

&lt;p&gt;生成する画像の幅と高さ。&lt;/p&gt;

&lt;p&gt;モデルにもよるが、デフォルトの 512 x 512 が一番うまく画像を生成できる。
これでは小さいため解像度を上げたくなるが、
解像度を上げると破綻した画像が生成されやすくなる。&lt;/p&gt;

&lt;p&gt;Width, Height はあまり上げずに生成後「Extras」タブにある拡大機能を使うか、
画像からの画像生成 (img2img) がオススメ。&lt;/p&gt;

&lt;p&gt;16:9 の画像を生成したいなら 896 x 512 を指定するとよい。&lt;/p&gt;

&lt;h3 id=&quot;batch-count-batch-size&quot;&gt;Batch count, Batch size&lt;/h3&gt;

&lt;p&gt;Batch size が1回で生成する枚数で、Batch count が何回実行するか。
最終的に Batch size × Batch count の枚数が生成される。&lt;/p&gt;

&lt;p&gt;Batch size を増やすと VRAM の必要量が増える。&lt;/p&gt;

&lt;h3 id=&quot;seed&quot;&gt;Seed&lt;/h3&gt;

&lt;p&gt;乱数の種。
Seed の値とモデル、プロンプト等の生成条件が同じであれば毎回同じ画像が生成される。&lt;/p&gt;

&lt;p&gt;サイコロアイコンをクリックするか -1 を指定すればランダムに、
リサイクルアイコンをクリックすると前回と同じ Seed がセットされる。&lt;/p&gt;

&lt;p&gt;基本的には -1 を指定し画像をランダム生成するが、
プロンプトやサンプリングの影響を比較したい場合には値を固定する。&lt;/p&gt;

&lt;p&gt;右にある Extra にチェックを入れると追加の UI が表示される。
Seed を固定し Variation strength を上げることで、
大まかな構図はそのままに一部が変わった画像を生成できる。
全体の雰囲気はいいけど一部を修正したいときに使える。&lt;/p&gt;

&lt;h3 id=&quot;sampling-method-sampling-steps&quot;&gt;Sampling method, Sampling steps&lt;/h3&gt;

&lt;p&gt;Sampling steps を上げると精緻な絵になるが生成に時間がかかる。
上げすぎてもあまり違いがわからない。デフォルトの 20 から 50 くらいがよさそう。&lt;/p&gt;

&lt;p&gt;Sampling method の違いはよくわからない。
「DPM++ SDE karras」を選ぶとデフォルトの「Euler a」より
ステップ数が少なくてもいい絵ができる気がする。&lt;/p&gt;

&lt;h3 id=&quot;cfg-scale&quot;&gt;CFG Scale&lt;/h3&gt;

&lt;p&gt;プロンプトに対してどの程度従うかを設定できるらしい。
値を大きくすればプロンプトに沿った画像が生成される反面、破綻した画像が生成されやすくなるとか。&lt;/p&gt;

&lt;p&gt;デフォルトの 7 のままでよさそう。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://gigazine.net/news/20220928-stable-diffusion-classifier-free-guidance/&quot;&gt;画像生成AI「Stable Diffusion」でどれぐらいプロンプト・呪文の指示に従うかを決める「CFG(classifier-free guidance)」とは一体何なのか？ - GIGAZINE&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;restore-faces-tiling-hires-fix&quot;&gt;Restore faces, Tiling, Hires. fix&lt;/h3&gt;

&lt;p&gt;Restore faces は人間の顔を生成した際に補正してくれる機能だが、
二次元のアニメ調イラストではキャラの目の中に人間の目が描かれて気持ち悪くなるのでオフ推奨。&lt;/p&gt;

&lt;p&gt;Tiling はタイルのように並べても継ぎ目のないシームレスな画像を生成する。
3D のテクスチャを作成するのに使えるらしい。&lt;/p&gt;

&lt;p&gt;Hires. fix は生成した画像を拡大して高解像度化してくれるがその分時間がかかる。
気に入ったものだけをあとから拡大したほうが効率がよいのでオフ推奨。&lt;/p&gt;

&lt;h2 id=&quot;モデルのダウンロードと追加&quot;&gt;モデルのダウンロードと追加&lt;/h2&gt;

&lt;p&gt;web UI の初期状態でもモデルがインストールされるが、
画風は実写的でアニメ調の二次元イラストを生成するには向いていない。
モデルと呼ばれるファイルを追加することで画風を変えることができる。&lt;/p&gt;

&lt;h3 id=&quot;モデルのダウンロード&quot;&gt;モデルのダウンロード&lt;/h3&gt;

&lt;p&gt;モデルは &lt;a href=&quot;https://huggingface.co/spaces/huggingface-projects/diffusers-gallery&quot;&gt;Hugging Face&lt;/a&gt; や
&lt;a href=&quot;https://civitai.com/&quot;&gt;Civitai&lt;/a&gt; などで探してダウンロードする。&lt;/p&gt;

&lt;p&gt;拡張子が .ckpt または .safetensor のものをダウンロードすればよい。
両方用意されている場合は .safetensor のほうが安全性が高いためそちらをダウンロードする。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://economylife.net/safetensors-ckpt-difference/&quot;&gt;AIモデルのsafetensors形式とは何者か？ckptと比較しつつ解説する | 経済的生活日誌&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;モデルのファイル名に付いてる-pruned-や-fp16-って何&quot;&gt;モデルのファイル名に付いてる pruned や fp16 って何？&lt;/h4&gt;

&lt;p&gt;画像生成に影響の少ない部分を削って軽量化したもの。
pruned や fp16 が用意されている場合はそちらをダウンロードするとよい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/guide/mixed_precision?hl=ja&quot;&gt;TensorFlow のサイト&lt;/a&gt;
によると「NVIDIA GPU は float32 よりも float16 で速く演算を実行でき」るらしい。 (float16 = fp16)&lt;/p&gt;

&lt;h3 id=&quot;モデルの追加方法&quot;&gt;モデルの追加方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;モデルをダウンロードする。&lt;/li&gt;
  &lt;li&gt;ダウンロードしたモデルを web UI のフォルダにある models\Stable-diffusion フォルダへ入れる。&lt;/li&gt;
  &lt;li&gt;web UI 画面左上にある「Stable Diffusion checkpoint」右の更新ボタンを押す。&lt;/li&gt;
  &lt;li&gt;リストでモデルが選択できるようになる。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;オススメの二次元イラスト系モデル&quot;&gt;オススメの二次元イラスト系モデル&lt;/h3&gt;

&lt;p&gt;以下の2つのモデルはどちらも美しいイラストが生成できるためオススメ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/WarriorMama777/OrangeMixs&quot;&gt;AbyssOrangeMix3 (AOM3)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/andite/anything-v4.0&quot;&gt;Anything v4.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AbyssOrangeMix3 は A1 から A3 と A1B がある。
A1 がアニメ調、A2が絵画調、A1B と A3 が中間。&lt;/p&gt;

&lt;p&gt;アニメ調 ← A1 A1B A3 A2 → 絵画調&lt;/p&gt;

&lt;p&gt;どちらのモデルも一緒に VAE (後述) が公開されているのでそちらを利用する。&lt;/p&gt;

&lt;h2 id=&quot;vae&quot;&gt;VAE&lt;/h2&gt;

&lt;p&gt;同じモデルでも VAE によって色が変わり印象が異なってくる。
AbyssOrangeMix や Anything のように VAE が一緒に公開されているモデルは
そちらを利用したほうがよい。&lt;/p&gt;

&lt;h3 id=&quot;vae-を選択できるようにする&quot;&gt;VAE を選択できるようにする&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;「Settings」タブをクリック&lt;/li&gt;
  &lt;li&gt;左の一覧から「User interface」をクリック&lt;/li&gt;
  &lt;li&gt;下から4つ目くらいにある「Quicksettings list」に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,sd_vae&lt;/code&gt; を追加する (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sd_model_checkpoint,sd_vae&lt;/code&gt; になる)&lt;/li&gt;
  &lt;li&gt;上部の「Apply settings」をクリック&lt;/li&gt;
  &lt;li&gt;「Reload UI」をクリック&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;vae-の追加方法&quot;&gt;VAE の追加方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;VAE をダウンロードする。&lt;/li&gt;
  &lt;li&gt;ダウンロードした VAE を web UI のフォルダにある models\VAE フォルダへ入れる。&lt;/li&gt;
  &lt;li&gt;web UI 画面上部にある「SD VAE」右の更新ボタンを押す。&lt;/li&gt;
  &lt;li&gt;リストで VAE が選択できるようになる。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;過去に生成した画像のプロンプト等を確認-png-info&quot;&gt;過去に生成した画像のプロンプト等を確認 (PNG Info)&lt;/h2&gt;

&lt;p&gt;生成した画像を「PNG Info」タブにある「Source」へ
ドラッグアンドドロップすることでプロンプト、モデル、Seed 等を確認できる。&lt;/p&gt;

&lt;p&gt;また、「Send to txt2img」等のボタンを押すことで txt2img 等へコピー可能。
過去に生成したものと似た画像を簡単に生成できる。
ただし、モデルと VAE は反映されないので注意。&lt;/p&gt;

&lt;h2 id=&quot;画像とテキストからの画像生成-img2img&quot;&gt;画像とテキストからの画像生成 (img2img)&lt;/h2&gt;

&lt;p&gt;「img2img」タブで画像とテキストを元に新たな画像を生成できる。&lt;/p&gt;

&lt;p&gt;画像により構図やポーズをある程度制御できるため、
txt2img と比べ出力画像の解像度を高くしても破綻しにくい。
よって、txt2img では解像度低めでランダムに大量生成し、
良いものができたら img2img で高解像度化、細部の修正を行うとよい。&lt;/p&gt;

&lt;p&gt;また、txt2img で生成された画像に足りない要素を手で描き加えたあと再生成するといった使い方もできる。
例えば、肌色で直線を描けば腕や足として認識して描き直してくれる。
英語で伝えにくい構図やポーズを描かせるのにも有用。&lt;/p&gt;

&lt;p&gt;プロンプト等の設定は txt2img と同じ。
プロンプトなしの画像のみでも生成できるが、プロンプトを入力したほうが当然精度は高い。
txt2img で作成した画像を img2img で高解像度化するのであれば同じプロンプトを指定するとよい。&lt;/p&gt;

&lt;h3 id=&quot;元画像の指定&quot;&gt;元画像の指定&lt;/h3&gt;

&lt;p&gt;元となる画像を「ここに画像をドロップ」と書いてあるところにドラッグアンドドロップするだけ。&lt;/p&gt;

&lt;h3 id=&quot;resize-mode&quot;&gt;Resize mode&lt;/h3&gt;

&lt;p&gt;Resize mode は元画像と生成画像の縦横比が違う場合の処理を指定できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just resize&lt;br /&gt;
元画像の縦横比を無視して生成画像全体に引き伸ばす。&lt;br /&gt;
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が横長の 1280 x 960 に引き伸ばされる。&lt;/li&gt;
  &lt;li&gt;Crop and resize&lt;br /&gt;
元画像の縦横比を維持して拡大/縮小し、はみ出た部分は無視する。&lt;br /&gt;
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が 1280 x 1280 に引き伸ばされ上下が切れる。&lt;/li&gt;
  &lt;li&gt;Resize and fill&lt;br /&gt;
元画像の縦横比を維持して拡大/縮小し、足りない部分を埋める。&lt;br /&gt;
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が 960 x 960 に引き伸ばされ左右の足りない部分は自動生成される。&lt;/li&gt;
  &lt;li&gt;Just resize (latent upscale)&lt;br /&gt;
元画像を高解像度化したあと Just resize と同様の処理を行う。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;denoising-strength&quot;&gt;Denoising strength&lt;/h3&gt;

&lt;p&gt;下げると元画像に近いがぼんやりとした画像、上げると元画像と違う画像になっていく。&lt;/p&gt;

&lt;p&gt;デフォルトの 0.75 では大きく変わる場合があるため、元画像に似せたいなら 0.5 ～ 0.6 くらいへ下げるとよい。&lt;/p&gt;

&lt;h2 id=&quot;img2img-内のタブ&quot;&gt;img2img 内のタブ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Sketch: img2img とほとんど同じだが、画面上の元画像に対してその場で書き込んで修正が可能。&lt;/li&gt;
  &lt;li&gt;Inpaint: 画像の一部のみを生成する。黒く塗りつぶした部分、または塗りつぶしていない部分を描き直す。&lt;/li&gt;
  &lt;li&gt;Inpaint sketch: 画像の一部のみを生成する。色を塗った部分のみ、その色を反映して描き直す。&lt;/li&gt;
  &lt;li&gt;Inpaint upload: Inpaint と同様だがマスクを別画像で指定できる。&lt;/li&gt;
  &lt;li&gt;Batch: ディレクトリを指定してバッチ処理ができる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;画像からプロンプトを生成-interrogate-clip-interrogate-deepbooru&quot;&gt;画像からプロンプトを生成 (Interrogate CLIP, Interrogate DeepBooru)&lt;/h2&gt;

&lt;p&gt;画像を指定したあと「Interrogate CLIP」または「Interrogate DeepBooru」のボタンをクリックすると
画像からプロンプトを生成できる。&lt;/p&gt;

&lt;p&gt;「Interrogate DeepBooru」は Danbooru のタグになる。&lt;/p&gt;

&lt;h2 id=&quot;起動時の引数設定&quot;&gt;起動時の引数設定&lt;/h2&gt;

&lt;p&gt;「webui-user.bat」をテキストエディタで編集することで web UI 起動時の引数を設定できる。&lt;/p&gt;

&lt;h3 id=&quot;xformers-の導入&quot;&gt;xFormers の導入&lt;/h3&gt;

&lt;p&gt;xFormers を導入すると画像生成速度が向上しVRAMの使用量も削減される。
ただし、Seed 値を固定しても微妙に異なる画像が生成されるようになるという欠点がある。
欠点より利点が大きいため導入したほうがよい。&lt;/p&gt;

&lt;p&gt;導入方法は簡単で、「webui-user.bat」をテキストエディタで開き&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;となっている部分を以下のように変更し保存する。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=--xformers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存後の初回起動時に xFormers がインストールされる。&lt;/p&gt;

&lt;h3 id=&quot;no-half-vae-の指定&quot;&gt;–no-half-vae の指定&lt;/h3&gt;

&lt;p&gt;VAE を変更して画像を生成しているとまれにエラーが発生し、
エラーを回避するためには &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-half-vae&lt;/code&gt; というオプションを利用するよう指示されることがある。
この場合も同様に「webui-user.bat」をテキストエディタで編集すればよい。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-half-vae&lt;/code&gt; だけを指定するなら&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=--no-half-vae
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;xFormers と併用するなら&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set COMMANDLINE_ARGS=--xformers --no-half-vae
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Mon, 06 Mar 2023 15:15:00 +0900</pubDate>
                <link>https://saasan.github.io/blog/2023/03/06/stable-diffusion%E3%82%92windows-10%E3%81%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9-%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2023/03/06/stable-diffusion%E3%82%92windows-10%E3%81%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9-%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84.html</guid>
                
                <category>Stable Diffusion</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>【2022年】買ってよかったものとか</title>
                <description>&lt;p&gt;今年買ってよかったものとか&lt;/p&gt;

&lt;h2 id=&quot;かみ田先生に雪美とペロを描いてもらった&quot;&gt;かみ田先生に雪美とペロを描いてもらった&lt;/h2&gt;

&lt;p&gt;初っ端から買ったものじゃないですが
&lt;a href=&quot;https://skeb.jp/@kamita_k/works/17&quot;&gt;Skeb でかみ田先生にリクエスト&lt;/a&gt;
してめちゃくちゃ可愛い雪美とペロを描いていただきました！&lt;/p&gt;

&lt;p&gt;かみ田先生に雪美を描いてもらえたら絶対可愛いだろうと以前から思ってたので
リクエストを受けていただけて夢が叶った感じです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;雪美ちゃん &lt;a href=&quot;https://t.co/PXBtc7hAGu&quot;&gt;pic.twitter.com/PXBtc7hAGu&lt;/a&gt;&lt;/p&gt;&amp;mdash; かみ田🥲土曜日東タ-37b (@kamita_k) &lt;a href=&quot;https://twitter.com/kamita_k/status/1601831710286827521?ref_src=twsrc%5Etfw&quot;&gt;December 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;ブリヂストン-tb1e&quot;&gt;ブリヂストン TB1e&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B09VGJHKQ2&amp;amp;linkId=2f4aa407e5f608bca63c72aaf8596f1f&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;電動アシストのクロスバイク。
アシストがあるので 10km くらいまでなら運動不足気味の私でも楽に走れる。&lt;/p&gt;

&lt;p&gt;8ヶ月で 600km 以上走りました。たぶん1年でこんなに自転車に乗ったのは初めて。
通勤も駅が遠いので電車に乗るより自転車で行ったほうが早くて楽になりました。&lt;/p&gt;

&lt;h2 id=&quot;サイクルコンピューター-xoss-g&quot;&gt;サイクルコンピューター XOSS G&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B083WK3BV5&amp;amp;linkId=a5ff59980932164612698fe068ded7f4&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;TB1e に乗り始めてから購入。
速度や走行距離、時間が測れる。&lt;/p&gt;

&lt;p&gt;某有名自転車アプリだと無課金では停車中も走行時間がカウントされるけど
これなら3,000円くらいで実際の走行時間だけが測れる。
スマホアプリと連動すれば走行ルートを Google マップ上に表示したりも可能。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今日は道を間違えずに着いた &lt;a href=&quot;https://t.co/JZsveyGX71&quot;&gt;pic.twitter.com/JZsveyGX71&lt;/a&gt;&lt;/p&gt;&amp;mdash; カガミ (@saasan) &lt;a href=&quot;https://twitter.com/saasan/status/1528275360114126849?ref_src=twsrc%5Etfw&quot;&gt;May 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;xbox-elite-ワイヤレス-コントローラー-シリーズ-2&quot;&gt;Xbox Elite ワイヤレス コントローラー シリーズ 2&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07V8VMY9Q&amp;amp;linkId=b3b63295d3596edf0af3ccc7ca3f46a1&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;初代エリコンと比べ背面のパドルが小さくなり誤って押すことが減った。
初代エリコンでは手前側2つは誤爆が多くて使い物にならなかったけど
シリーズ2ではそれがなくなり4つ全部使えてる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rewasd.com/&quot;&gt;reWASD&lt;/a&gt;
でパドルにサブパレット(キーボード)を割り当てたら PSO2 がかなり快適になった。&lt;/p&gt;

&lt;h2 id=&quot;dell-ドッキングステーション-wd15&quot;&gt;Dell ドッキングステーション WD15&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07J5P9TJD&amp;amp;linkId=fb2760e265626d9e7078aae22154567c&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;以前使用していたバッファロー製のドッキングステーションは動作が不安定で
実質電源と HDMI 出力だけにしか使えていなかったので、
会社の PC と同じ Dell 製で相性が良いかと思ったこちらを購入。&lt;/p&gt;

&lt;p&gt;電源、HDMI と DisplayPort による2画面出力、USBキーボードとマウスが
ケーブル1本で繋がるのは便利。&lt;/p&gt;

&lt;h2 id=&quot;ベッセルvessel-ボールラチェットドライバー-2200-2100&quot;&gt;ベッセル(VESSEL) ボールラチェットドライバー 2200 +2×100&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B019C821PC&amp;amp;linkId=250825e015f2b6f90387f187b0da2b69&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;ボールグリップドライバーにラチェット機構がついてて押さえながら回せる。
自転車や PC などのメンテが楽になった。&lt;/p&gt;

&lt;h2 id=&quot;ピザ焼網&quot;&gt;ピザ焼網&lt;/h2&gt;

&lt;iframe sandbox=&quot;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&quot; style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B001U7ENTQ&amp;amp;linkId=c87fa8aafa0edda3083bee7a17541568&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;オーブンレンジがあるのにオーブン機能をまったく使ってなかったんで
試しに市販のチルドピザ(&lt;a href=&quot;https://www.nipponham.co.jp/ishigama/&quot;&gt;石窯工房&lt;/a&gt; とか)を焼いてみたらおいしかった。&lt;/p&gt;

&lt;p&gt;しかし皿に乗せて焼くとあまりカリッとした感じにならないんでこちらを購入。
ピザがさらにおいしく焼けるようになった。&lt;/p&gt;

&lt;p&gt;私は10インチ用を買ったけど大きすぎたのでたぶん8インチ用でいい。&lt;/p&gt;
</description>
                <pubDate>Sat, 31 Dec 2022 21:30:00 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/12/31/2022%E5%B9%B4-%E8%B2%B7%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE%E3%81%A8%E3%81%8B.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/12/31/2022%E5%B9%B4-%E8%B2%B7%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE%E3%81%A8%E3%81%8B.html</guid>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>Ubuntu 22.04 で apt-key add したあと apt-update で Key is stored in legacy trusted.gpg keyring というメッセージが表示される場合の対応方法</title>
                <description>&lt;p&gt;結論から言うと、以下のコマンドで鍵を追加すれば良い。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo curl -fsSL https://myrepo.example/myrepo.asc -o /etc/apt/keyrings/myrepo.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;鍵がテキスト形式の場合は拡張子を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.asc&lt;/code&gt;、バイナリ形式の場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gpg&lt;/code&gt; にすること。&lt;/p&gt;

&lt;p&gt;既に公開鍵を追加済みの場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-key list&lt;/code&gt; で下8桁を確認し &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-key del XXXXXXXX&lt;/code&gt; で削除する。&lt;/p&gt;

&lt;h2 id=&quot;解説&quot;&gt;解説&lt;/h2&gt;

&lt;p&gt;Ubuntu 22.04 で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-key add&lt;/code&gt; したあと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-update&lt;/code&gt; すると以下のメッセージが表示される。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;鍵が古い非推奨の場所に保存されているという警告だ。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man apt-key&lt;/code&gt; によると&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;apt-key(8) will last be available in Debian 11 and Ubuntu 22.04.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;apt-key は Debian 11 と Ubuntu 22.04 を最後に廃止となるので
鍵の追加方法も変える必要がある。&lt;/p&gt;

&lt;p&gt;メッセージ通り DEPRECATION セクションを見ると次のように書かれている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DEPRECATION&lt;/p&gt;

  &lt;p&gt;Except for using apt-key del in maintainer scripts, the use of apt-key is deprecated. This section shows how to replace existing use of apt-key.&lt;/p&gt;

  &lt;p&gt;If your existing use of apt-key add looks like this:&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- https://myrepo.example/myrepo.asc | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Then you can directly replace this with (though note the recommendation below):&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- https://myrepo.example/myrepo.asc | sudo tee /etc/apt/trusted.gpg.d/myrepo.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Make sure to use the “asc” extension for ASCII armored keys and the “gpg” extension for the binary OpenPGP format (also known as “GPG key public ring”). The binary OpenPGP format works for all apt versions, while the ASCII armored format works for apt version &amp;gt;= 1.4.&lt;/p&gt;

  &lt;p&gt;Recommended: Instead of placing keys into the /etc/apt/trusted.gpg.d directory, you can place them anywhere on your filesystem by using the Signed-By option in your sources.list and pointing to the filename of the key. See sources.list(5) for details. Since APT 2.4, /etc/apt/keyrings is provided as the recommended location for keys not managed by packages. When using a deb822-style sources.list, and with apt version &amp;gt;= 2.4, the Signed-By option can also be used to include the full ASCII armored keyring directly in the sources.list without an additional file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下のような形式で使用している場合は&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- https://myrepo.example/myrepo.asc | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次のように書き換えればよい。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO- https://myrepo.example/myrepo.asc | sudo tee /etc/apt/trusted.gpg.d/myrepo.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;拡張子が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.asc&lt;/code&gt; のファイルを置けば ASCII armored 形式 (テキスト形式)、
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gpg&lt;/code&gt; のファイルを置けばバイナリ形式として処理される。
Ubuntu 22.04 の場合 ASCII armored 形式からバイナリ形式への変換 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpg --dearmor&lt;/code&gt;) は不要らしい。&lt;/p&gt;

&lt;p&gt;また、パッケージで管理されていない鍵は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/keyrings&lt;/code&gt; に置くことが推奨されている。
よって冒頭のコマンドとなる。&lt;/p&gt;
</description>
                <pubDate>Mon, 24 Oct 2022 16:25:04 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/10/24/ubuntu-22.04%E3%81%A7apt-key-add%E3%81%97%E3%81%9F%E3%81%82%E3%81%A8apt-update%E3%81%A7key-is-stored-in-legacy-trusted.gpg-keyring%E3%81%A8%E3%81%84%E3%81%86%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/10/24/ubuntu-22.04%E3%81%A7apt-key-add%E3%81%97%E3%81%9F%E3%81%82%E3%81%A8apt-update%E3%81%A7key-is-stored-in-legacy-trusted.gpg-keyring%E3%81%A8%E3%81%84%E3%81%86%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95.html</guid>
                
                <category>Ubuntu</category>
                
                <category>Linux</category>
                
                <category>APT</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>ZoneID (Zone.Identifier) を一括で削除する</title>
                <description>&lt;p&gt;ネットからダウンロードしたファイルを WSL の Linux 環境にコピーすると
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;〇〇:Zone.Identifier&lt;/code&gt; というファイルが一緒にコピーされて煩わしい。&lt;/p&gt;

&lt;p&gt;ファイルが1つだけならコピー前にファイルのプロパティから解除するかコピー後に削除すればいいが、
サブディレクトリ内なども含め複数まとめて処理したい場合は PowerShell を使う。&lt;/p&gt;

&lt;p&gt;PowerShell で削除したいファイルがあるディレクトリに移動後に
以下のコマンドで Zone.Identifier があることを確認。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get-ChildItem -Recurse -File | Get-Item -Stream Zone.Identifier -ErrorAction SilentlyContinue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.utility/unblock-file&quot;&gt;Unblock-File&lt;/a&gt;
で削除できる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get-ChildItem -Recurse -File | Unblock-File
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.management/remove-item#7&quot;&gt;Remove-Item -Stream Zone.Identifier&lt;/a&gt;
でもいい。&lt;/p&gt;
</description>
                <pubDate>Mon, 03 Oct 2022 18:30:00 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/10/03/zoneid-zone.identifier%E3%82%92%E4%B8%80%E6%8B%AC%E3%81%A7%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/10/03/zoneid-zone.identifier%E3%82%92%E4%B8%80%E6%8B%AC%E3%81%A7%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B.html</guid>
                
                <category>Windows</category>
                
                <category>WSL</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>Mozilla Firefox で Web サイトのダークモードを無効化する</title>
                <description>&lt;p&gt;Firefox 本体はダークテーマを使いたいけど
Web サイトまでダークモードになると文字が読みづらい。&lt;/p&gt;

&lt;p&gt;そんな私みたいにわがままな人向けなのかは分からないが
Firefox には Web サイトだけライトモードにする方法があった。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about:config&lt;/code&gt; で
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout.css.prefers-color-scheme.content-override&lt;/code&gt;
を変更すればいいらしい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0: ダーク固定&lt;/li&gt;
  &lt;li&gt;1: ライト固定&lt;/li&gt;
  &lt;li&gt;2: OS の設定に従う&lt;/li&gt;
  &lt;li&gt;3: Firefox のテーマに従う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デフォルト値は 3。&lt;/p&gt;

&lt;p&gt;当然だがこれを 0 にしても対応していないサイトはダークモードにならない。&lt;/p&gt;
</description>
                <pubDate>Wed, 07 Sep 2022 00:16:02 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/09/07/mozilla-firefox%E3%81%A7web%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%83%80%E3%83%BC%E3%82%AF%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/09/07/mozilla-firefox%E3%81%A7web%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%83%80%E3%83%BC%E3%82%AF%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B.html</guid>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>dtab Compact d-42A から不要なアプリを削除する方法</title>
                <description>&lt;p&gt;昨年踏んで割ってしまった Xperia Z3 Tablet Compact の後継として
&lt;a href=&quot;https://www.docomo.ne.jp/product/d42a/&quot;&gt;dtab Compact d-42A&lt;/a&gt; を買った。&lt;/p&gt;

&lt;p&gt;スペック的にはミドルレンジの Snapdragon 665 なので最新のゲームは動かないけど、
Z3 Tablet Compact と同じ8インチサイズだし電子書籍を読むにはいいんじゃないかと。
そもそも Android の8インチタブレットは不作で、
他は低スペックな激安タブレットしか選択肢がない。&lt;/p&gt;

&lt;p&gt;d-42A はドコモ製なのでキャリア製端末の例に漏れず
削除できない不要なアプリが大量に入っていた。
まずはこれを削除したので手順を残しておく。
なお、Android 11 へアップデート後にアプリを削除したが
以前と同じ手順で特に問題なかった。&lt;/p&gt;

&lt;h2 id=&quot;削除手順&quot;&gt;削除手順&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;アプリを削除すると最悪の場合端末が起動しなくなったり
動作が不安定になる可能性があります。&lt;br /&gt;
リスクを承知の上、自己責任で行ってください。&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;d-42A で 設定 &amp;gt; タブレット情報 を開く&lt;/li&gt;
  &lt;li&gt;ビルド番号を7回タップし開発者向けオプションを表示する&lt;/li&gt;
  &lt;li&gt;設定 &amp;gt; システム &amp;gt; 詳細設定 &amp;gt; 開発者向けオプション を開く&lt;/li&gt;
  &lt;li&gt;USBデバッグをオンにする&lt;/li&gt;
  &lt;li&gt;PC で
&lt;a href=&quot;https://developer.android.com/studio/releases/platform-tools&quot;&gt;Android SDK Platform-Tools&lt;/a&gt;
をダウンロードし展開する&lt;/li&gt;
  &lt;li&gt;Platform-Tools を展開したフォルダをコマンドプロンプトで開く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb devices&lt;/code&gt; を実行し接続している端末を確認する&lt;/li&gt;
  &lt;li&gt;d-42A に「USBデバッグを許可しますか?」と表示されるので「OK」を押して許可する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell pm list packages -s&lt;/code&gt; を実行しパッケージ名の一覧を表示する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; を実行しシェルを起動する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pm uninstall -k --user 0 パッケージ名&lt;/code&gt; を実行し不要アプリを削除する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; を実行しシェルを終了する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb kill-server&lt;/code&gt; を実行し adb サーバーを停止する&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;削除したパッケージ&quot;&gt;削除したパッケージ&lt;/h2&gt;

&lt;p&gt;パッケージ名に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nttdocomo&lt;/code&gt; が含まれるもの+αを削除した。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jp.co.omronsoft.iwnnime.ml_lenovo&lt;/code&gt; は標準のキーボードアプリのため
Gboard など他のキーボードアプリをインスールする前に消すと
文字が入力できなくなって死ぬので注意。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;com.android.contacts (ドコモ電話帳)
com.google.android.apps.photos (Google フォト)
com.google.android.apps.tachyon (Google Duo)
com.google.android.apps.wellbeing (Digital Wellbeing)
com.google.android.apps.youtube.music (YouTube Music)
com.google.android.projection.gearhead (Android Auto)
com.google.android.videos (Google Play ムービー＆ TV)
com.iii.app.kidsgallery
com.iii.app.safebrowser
com.lenovo.d42a.manual
com.lenovo.docomosettings
com.lenovo.homescreenshot (マイホームスクリーン)
com.lenovo.simplemenu
com.nttdocomo.android.accountauthenticator
com.nttdocomo.android.accountwipe
com.nttdocomo.android.anmane2
com.nttdocomo.android.apnsw
com.nttdocomo.android.applicationmanager
com.nttdocomo.android.cloudset
com.nttdocomo.android.databackup
com.nttdocomo.android.devicehelp
com.nttdocomo.android.dmenu2
com.nttdocomo.android.docomoset
com.nttdocomo.android.homezozo
com.nttdocomo.android.idmanager
com.nttdocomo.android.initialization
com.nttdocomo.android.lpa
com.nttdocomo.android.mascot
com.nttdocomo.android.msg
com.nttdocomo.android.mymagazine
com.nttdocomo.android.pf.dcmippushaggregator
com.nttdocomo.android.pf.dcmwappush
com.nttdocomo.android.remotelock
com.nttdocomo.android.schedulememo
com.nttdocomo.android.sdcardbackup
com.nttdocomo.android.sha2.kids
com.nttdocomo.android.store
com.nttdocomo.android.wipe
com.tblenovo.kidslauncher
com.tblenovo.kidsmodewebview
com.tblenovo.lewea
jp.co.nttdocomo.anshinmode
jp.co.nttdocomo.bridgelauncher
jp.co.nttdocomo.carriermail
jp.co.nttdocomo.lcsapp
jp.co.nttdocomo.saigaiban
jp.co.omronsoft.android.decoemojimanager_docomo
jp.co.omronsoft.iwnnime.ml_lenovo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Fri, 06 May 2022 01:31:47 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/05/06/dtab-compact-d-42a%E3%81%8B%E3%82%89%E4%B8%8D%E8%A6%81%E3%81%AA%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/05/06/dtab-compact-d-42a%E3%81%8B%E3%82%89%E4%B8%8D%E8%A6%81%E3%81%AA%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95.html</guid>
                
                <category>ガジェット</category>
                
                <category>Android</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>Kindle Paperwhite (第11世代) を買って1ヶ月で売り払った話</title>
                <description>&lt;p&gt;Kindle Paperwhite を買ってから1ヶ月で売り払ってしまったので
良かった点と悪かった点をメモしておく。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Kindle Paperwhite買ったら無駄にでかい箱で送られてきたｗ &lt;a href=&quot;https://t.co/XZ0IkAhQ3v&quot;&gt;pic.twitter.com/XZ0IkAhQ3v&lt;/a&gt;&lt;/p&gt;&amp;mdash; カガミ (@saasan) &lt;a href=&quot;https://twitter.com/saasan/status/1490296551885148160?ref_src=twsrc%5Etfw&quot;&gt;February 6, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;購入した機種と動機&quot;&gt;購入した機種と動機&lt;/h2&gt;

&lt;p&gt;購入した機種は昨年発売された
第11世代の Kindle Paperwhite シグニチャー エディション。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B08N2ZL7PS&amp;amp;linkId=4da80f0733fdb2460f18831f27810717&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;一昨年までどの電子書籍サービスを使うか迷ってたんだけど、
昨年 Kindle に一本化すると決めてから吹っ切れて
1年で200冊くらい Kindle 本を買った。&lt;/p&gt;

&lt;p&gt;電子書籍を読む端末は軽量でコンパクトな
Xperia Z3 Tablet Compact を使ってたんだけど
6月に踏んで割ってしまい、
それ以降重たくて大きい Galaxy Tab S4 で読むかたちに。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;仕事の電話でたたき起こされて寝ぼけてたせいで枕元に置いてたタブレット踏んでしまった…さよならXperia Z3 Tablet Compact… &lt;a href=&quot;https://t.co/ZiXxpe3isL&quot;&gt;pic.twitter.com/ZiXxpe3isL&lt;/a&gt;&lt;/p&gt;&amp;mdash; カガミ (@saasan) &lt;a href=&quot;https://twitter.com/saasan/status/1407072065677512705?ref_src=twsrc%5Etfw&quot;&gt;June 21, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;その後第11世代の Kindle Paperwhite が発売され
小型軽量で良さそうだったのと
電子ペーパーにも興味があったんで購入した。&lt;/p&gt;

&lt;p&gt;シグニチャーエディションにした理由は、
主に漫画を読むので下位モデルでは容量が足りないと判断したため。&lt;/p&gt;

&lt;p&gt;下位モデルの容量は 8GB だけど Galaxy Tab S4 で使ってる Kindle アプリの使用容量は 8GB を超えてた。
読み終わった本を消せば下位モデルでも入らないことはないけど
管理が面倒かな、と。&lt;/p&gt;

&lt;h2 id=&quot;悪かった点&quot;&gt;悪かった点&lt;/h2&gt;

&lt;h3 id=&quot;見開き表示切り替えのボタンが邪魔&quot;&gt;見開き表示切り替えのボタンが邪魔&lt;/h3&gt;

&lt;p&gt;Kindle Paperwhite では漫画の見開きページで
見開き表示へ切り替えるボタンが
下部中央に表示される。
これをタップすることで
1画面1ページ表示の状態から1画面2ページ表示に切り替わるわけだ。&lt;/p&gt;

&lt;p&gt;ただしこれは切り替えボタンが
漫画本文にかぶさって表示されるという問題がある。
しかも、一部の漫画では全ページにこれが表示されるので
漫画を読むときかなり邪魔。
一応ボタン右上の×をタップすれば消えるが、
全ページに表示されるのと電子ペーパー特有の反応の遅さが合わさり
イライラすることになる。&lt;/p&gt;

&lt;p&gt;おそらく電子書籍を作っている出版社が
その仕様を知らずに全ページ見開きとして
データを作っているのが原因なんだろうけど、
Kindle 端末側でも表示しない設定にできたらいいんだが…。&lt;/p&gt;

&lt;p&gt;前述の通り主に漫画を読むこともあり、
この仕様に耐えられなかったのが売り払った主な原因。&lt;/p&gt;

&lt;h3 id=&quot;次の巻を開くボタンが自動で表示されない&quot;&gt;次の巻を開くボタンが自動で表示されない&lt;/h3&gt;

&lt;p&gt;Android の Kindle アプリだと、
複数巻ある漫画を1冊読み終わったあと次の巻を開くボタンが自動で表示されるけど
Kindle 端末ではそれが表示されない。&lt;/p&gt;

&lt;p&gt;最終ページで画面の上部をタップするか
一度ライブラリに戻らないと次の巻を開けないのが
UIの反応の遅さと合わさって地味に面倒。&lt;/p&gt;

&lt;h3 id=&quot;ダウンロードが遅い&quot;&gt;ダウンロードが遅い&lt;/h3&gt;

&lt;p&gt;Wi-Fi は IEEE 802.11n まで対応してるけど明らかにダウンロード速度が遅い。&lt;/p&gt;

&lt;p&gt;ストレージが 32GB あっても容量いっぱいにダウンロードするには忍耐が必要。&lt;/p&gt;

&lt;h3 id=&quot;ページ送りボタンがない&quot;&gt;ページ送りボタンがない&lt;/h3&gt;

&lt;p&gt;これは購入前から分かってたことだけど、
ページ送りの際タップする必要があるので操作を片手で完結できない。
端末が片手で持てる重さと画面サイズでも意味がない。&lt;/p&gt;

&lt;h2 id=&quot;良かった点&quot;&gt;良かった点&lt;/h2&gt;

&lt;h3 id=&quot;最後に読んだ本の表紙をスリープ中に表示する機能&quot;&gt;最後に読んだ本の表紙をスリープ中に表示する機能&lt;/h3&gt;

&lt;p&gt;画面を書き換えなければ電力を消費しない
電子ペーパーだからできる機能。&lt;/p&gt;

&lt;p&gt;モノクロとはいえ、好きな漫画の表紙を常時表示できるのはうれしい。&lt;/p&gt;

&lt;h3 id=&quot;片手で持てる重さと画面サイズ&quot;&gt;片手で持てる重さと画面サイズ&lt;/h3&gt;

&lt;p&gt;軽量で片手で持っていても疲れにくい。
ただし、前述の通りページを送るときは両手を使うことになる。&lt;/p&gt;

&lt;p&gt;画面サイズはほとんど漫画を読むのに困らなかった。
普通の漫画なら拡大せずにスラスラ読める。
セリフにルビが多い星界の紋章を読むときはさすがに拡大したけど。&lt;/p&gt;

&lt;h3 id=&quot;e-ink-電子ペーパー&quot;&gt;E Ink 電子ペーパー&lt;/h3&gt;

&lt;p&gt;液晶画面より目が疲れない気がする。&lt;/p&gt;

&lt;p&gt;ページ送り速度は耐えられるレベルだけど、
UI の表示が遅いのはタップに反応してるのかしてないのかわからず困る。&lt;/p&gt;

&lt;h3 id=&quot;明るさ自動調節機能&quot;&gt;明るさ自動調節機能&lt;/h3&gt;

&lt;p&gt;明るい部屋で読むときも、寝る前に暗くした部屋で読むときも
バックライトの明るさを調整しなくて済むのは良い。&lt;/p&gt;

&lt;h3 id=&quot;usb-type-c-での充電&quot;&gt;USB Type-C での充電&lt;/h3&gt;

&lt;p&gt;第11世代から充電が USB Type-C になったそうで、
他の機器と充電器を共用できるのはやはり便利。&lt;/p&gt;
</description>
                <pubDate>Sun, 13 Mar 2022 07:05:19 +0900</pubDate>
                <link>https://saasan.github.io/blog/2022/03/13/kindle-paperwhite%E3%82%92%E8%B2%B7%E3%81%A3%E3%81%A61%E3%83%B6%E6%9C%88%E3%81%A7%E5%A3%B2%E3%82%8A%E6%89%95%E3%81%A3%E3%81%9F.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2022/03/13/kindle-paperwhite%E3%82%92%E8%B2%B7%E3%81%A3%E3%81%A61%E3%83%B6%E6%9C%88%E3%81%A7%E5%A3%B2%E3%82%8A%E6%89%95%E3%81%A3%E3%81%9F.html</guid>
                
                <category>ガジェット</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>ブックマークレットでトーストを表示する</title>
                <description>&lt;p&gt;ブックマークレットでクリップボードへコピーするスクリプトをいくつか使ってるけど、
コピー後に何も表示されないかたちだったんでコピーされたか分からないし
alertでメッセージを表示するのも野暮ったいんでトーストを表示することにした。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;function generateToastHTML(message) {
    return `
        &amp;lt;div class=&amp;quot;_toast&amp;quot;&amp;gt;
            &amp;lt;style scoped&amp;gt;
                ._toast
                {
                    position: fixed;
                    right: 2rem;
                    bottom: 0;
                    padding: 1rem;
                    width: 350px;
                    max-width: 100%;
                    opacity: 0;
                    color: #000;
                    background-color: rgba(255,255,255,.85);
                    border: 1px solid rgba(0,0,0,.1);
                    box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
                    border-radius: .25rem;
                    transition: opacity .3s, bottom .3s;
                }
            &amp;lt;/style&amp;gt;

            ${message}
        &amp;lt;/div&amp;gt;
    `;
}

function showToast(message) {
    const html = generateToastHTML(message);
    document.body.insertAdjacentHTML(&amp;#39;beforeend&amp;#39;, html);
    const toast = document.body.lastElementChild;
    setTimeout(() =&amp;gt; {
        toast.style.bottom = &amp;#39;2rem&amp;#39;;
        toast.style.opacity = 1;

        setTimeout(() =&amp;gt; {
            toast.style.bottom = &amp;#39;0&amp;#39;;
            toast.style.opacity = 0;
            setTimeout(() =&amp;gt; toast.remove(), 1000);
        }, 3000);
    }, 1);
}

showToast(&amp;#39;トーストのメッセージ&amp;#39;);
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/saasan/f0d41060f5be49d8aa2e3b636ea41e15.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;ブックマークレットなので
ライブラリ等なしの素のJavaScript (いわゆるVanilla JS) で書いたけど
意外とシンプルに実装できた。&lt;/p&gt;
</description>
                <pubDate>Sun, 26 Dec 2021 01:07:30 +0900</pubDate>
                <link>https://saasan.github.io/blog/2021/12/26/%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E3%81%A7%E3%83%88%E3%83%BC%E3%82%B9%E3%83%88%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2021/12/26/%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E3%81%A7%E3%83%88%E3%83%BC%E3%82%B9%E3%83%88%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B.html</guid>
                
                <category>JavaScript</category>
                
                <category>Bookmarklet</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>わたゆり「カフェ・リーベ女学園」の間取り図を作ってみた</title>
                <description>&lt;p&gt;最近「私の百合はお仕事です！」(わたゆり) にハマってます。
&lt;a href=&quot;https://www.ichijinsha.co.jp/yurihime/title/%e6%9c%aa%e5%b9%a1/%e7%a7%81%e3%81%ae%e7%99%be%e5%90%88%e3%81%af%e3%81%8a%e4%bb%95%e4%ba%8b%e3%81%a7%e3%81%99%ef%bc%81/&quot;&gt;公式サイトの紹介&lt;/a&gt;
を読めば分かる通り、
&lt;ruby&gt;姉妹&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;シュヴェスター&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
制度のある
&lt;ruby&gt;お嬢様学校&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ミッションスクール&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
「リーベ女学園」という設定で運営されている
コンセプトカフェを舞台とした作品です。&lt;/p&gt;

&lt;p&gt;ストーリーが良くて泣ける作品なのでぜひ読んでみてください。
今なら Amazon Prime で1、2巻が読み放題になっています。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B072KH2H5V&amp;amp;linkId=6f19c25541d8022627fc2e8a66573385&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B076F2DRBL&amp;amp;linkId=de5dc53d2d5358c2fc09428e9729c389&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;わたゆりは上記の通り「カフェ・リーベ女学園」が舞台となっており
多くのシーンがその中で展開されるため、
その間取りが分かればさらに理解が深まるかと思い間取り図を作成してみました。&lt;/p&gt;

&lt;h2 id=&quot;出典について&quot;&gt;出典について&lt;/h2&gt;

&lt;p&gt;以下の間取り図は
&lt;a href=&quot;https://www.amazon.co.jp/dp/B07878H4D9/?tag=saasan-22&quot;&gt;Amazon Kindle の電子書籍「私の百合はお仕事です！」&lt;/a&gt;
1～9巻を参考に
&lt;a href=&quot;https://twitter.com/saasan&quot;&gt;カガミ&lt;/a&gt;
が作成したものです。
公式な情報ではありませんので、間取り図について未幡先生や一迅社へ問い合わせないでください。&lt;/p&gt;

&lt;p&gt;ページ番号については、物理書籍と合わせるためページ内記載のものとしています。
Kindle の Android 版アプリで表示されるロケーションは、これに1を足した数値となります。&lt;/p&gt;

&lt;h2 id=&quot;間取り図&quot;&gt;間取り図&lt;/h2&gt;

&lt;p&gt;以下が作成した間取り図です。
&lt;a href=&quot;https://myhome-cloud.net/&quot;&gt;マイホームクラウド&lt;/a&gt;
で間取り図を作成したあと別のアプリで文字の追加など加工を行っています。&lt;/p&gt;

&lt;p&gt;リーベの背景は手で描かれているため、シーンによって物の大きさが異なることがあります。
間取り図の作成にあたっては複数のシーンを確認した上で、
大きな破綻がないよう一部調整しています。&lt;/p&gt;

&lt;p&gt;※2021/12/21追記: 背景は &lt;a href=&quot;https://twitter.com/n28miman/status/1473186141684002821&quot;&gt;途中から3Dに変更された&lt;/a&gt; とのことです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-12-19/liebe-layout.png&quot;&gt;&lt;img src=&quot;/img/blog/2021-12-19/liebe-layout.png&quot; alt=&quot;「カフェ・リーベ女学園」間取り図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;by-バックヤード&quot;&gt;BY (バックヤード)&lt;/h2&gt;

&lt;p&gt;サロンと並び頻繁に登場する場所のため
大まかな配置について特に異論はないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;by-内の小部屋&quot;&gt;BY 内の小部屋&lt;/h3&gt;

&lt;p&gt;BY 内にある小部屋 (※1) は作中で使用されておらず用途が分かりません。
壁には扉と手洗器、消毒液と思われるものが付いています。
扉に小窓が付いていることや (9巻120ページなど)、
手洗器と一緒に水周りとしてまとめられていると考えると
従業員用トイレでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;タイムレコーダー&quot;&gt;タイムレコーダー&lt;/h3&gt;

&lt;p&gt;間取り図に入っていない要素としてタイムレコーダー (打刻機) があります。
時計の下にあるキャビネットの上に置かれています (2巻99ページ)。
また、右にある柱にタイムカード入れがあります (3巻32ページ)。
作中では描かれていませんが、出退勤時にここで打刻していると思われます。&lt;/p&gt;

&lt;h2 id=&quot;サロン&quot;&gt;サロン&lt;/h2&gt;

&lt;p&gt;客席は5巻3ページに描かれている引きの絵を参考に、
対面2席のテーブルが左右に6つずつ、計24席としました。&lt;/p&gt;

&lt;p&gt;窓側に近い客席後ろの壁に鳩時計があります。 (1巻30ページ、2巻132ページ、9巻77ページなど)&lt;/p&gt;

&lt;h2 id=&quot;キッチン&quot;&gt;キッチン&lt;/h2&gt;

&lt;p&gt;キッチン内部やデシャップから繋がる部分は
作中であまり描かれていないため間違っているかもしれません。&lt;/p&gt;

&lt;p&gt;BY出入口右側にコンロとシンク (5巻77～78ページ)、左側に冷蔵庫があります (3巻34ページなど)。&lt;/p&gt;

&lt;p&gt;デシャップ側から入って右側にもシンクがあります。 (1巻107ページ、5巻78ページ)&lt;/p&gt;

&lt;p&gt;冷蔵庫と横にある作業台の中間、天井から吊られている棚にモニターが付いています。 (9巻120ページ)&lt;/p&gt;

&lt;h2 id=&quot;デシャップの右側にある扉&quot;&gt;デシャップの右側にある扉&lt;/h2&gt;

&lt;p&gt;デシャップの右側にある扉 (※2) は作中で使用されておらず用途が分かりません。
以下の理由からお客様用トイレでしょうか？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;飲食店のためお客様用トイレが必要&lt;/li&gt;
  &lt;li&gt;客席から近い&lt;/li&gt;
  &lt;li&gt;店の一番奥&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;レジ&quot;&gt;レジ&lt;/h2&gt;

&lt;p&gt;レジはBYへ入ってすぐ左側に置かれています。
雰囲気を損ねないため普段見えない場所に置かれているのだと思われますが、
客席か受付でお客様からお金を預かってBYへ持ち込み精算するかたちでしょうか？&lt;/p&gt;

&lt;p&gt;受付で精算の場合はお金を預かってBYへ持ち込むと
位置的にゲストからBY内が丸見えになってしまうため、
客席での精算のほうが有力かも？&lt;/p&gt;

&lt;h2 id=&quot;ピアノ左のテーブル&quot;&gt;ピアノ左のテーブル&lt;/h2&gt;

&lt;p&gt;ピアノ左にあるブルーメ選挙の投票箱が置かれていたテーブルは
選挙後も度々描かれており常設されているようです。
(9巻102ページなど)&lt;/p&gt;

&lt;h2 id=&quot;受付&quot;&gt;受付&lt;/h2&gt;

&lt;p&gt;受付にはレトロ風電話機が置かれています。
電話予約の対応は舞が行っていると7巻シフト36.2に書かれており、
Web受付の状況も確認しながら対応していると考えると
必然的にBYで受付を行う必要があります。
よってレトロ風電話機は雰囲気を出すための飾りと思われます。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;実際に使えるとしても舞さん以外かけ方が分からなそう。「21世紀少女たちめ…」&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;出入口&quot;&gt;出入口&lt;/h2&gt;

&lt;p&gt;出入口の扉は内側に開きます。 (5巻71ページ)&lt;/p&gt;

&lt;h2 id=&quot;作中で言及されているが場所不明のもの&quot;&gt;作中で言及されているが場所不明のもの&lt;/h2&gt;

&lt;h3 id=&quot;貴重品ロッカー&quot;&gt;貴重品ロッカー&lt;/h3&gt;

&lt;p&gt;3巻で果乃子のスマホが入れられた貴重品ロッカー。&lt;/p&gt;

&lt;h3 id=&quot;物置&quot;&gt;物置&lt;/h3&gt;

&lt;p&gt;ブルーメ選挙の投票箱が置かれている物置。
5巻88ページで舞が美月へ「ブルーメ選挙の投票箱を出すから見に来て」と言っています。
BYで「見に来て」と言っていることからBY外にあると思われます。&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Dec 2021 16:50:36 +0900</pubDate>
                <link>https://saasan.github.io/blog/2021/12/19/%E3%82%8F%E3%81%9F%E3%82%86%E3%82%8A-%E3%82%AB%E3%83%95%E3%82%A7-%E3%83%AA%E3%83%BC%E3%83%99%E5%A5%B3%E5%AD%A6%E5%9C%92-%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A%E5%9B%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2021/12/19/%E3%82%8F%E3%81%9F%E3%82%86%E3%82%8A-%E3%82%AB%E3%83%95%E3%82%A7-%E3%83%AA%E3%83%BC%E3%83%99%E5%A5%B3%E5%AD%A6%E5%9C%92-%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A%E5%9B%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F.html</guid>
                
                <category>本</category>
                
                <category>私の百合はお仕事です！</category>
                
                <category>わたゆり</category>
                
                
                <category>blog</category>
                
            </item>
        
            <item>
                <title>Lenovo ThinkCentre M600 Tiny に PCI Express を無理やり増設する</title>
                <description>&lt;p&gt;5年ほど前に組んだ自作 PC がスペック的につらくなってきたため
新しいものを組むことにしました。
PC 入れ替えにあたり、これまで1台で
ゲーム、開発、TV 録画などすべて行っていた状態から録画機能を切り離し、
録画専用 PC として分けることにしました。&lt;/p&gt;

&lt;p&gt;目的は以下のとおりです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PC 交換時の録画への影響を最小限にする&lt;/li&gt;
  &lt;li&gt;ゲームなどの高負荷による録画への影響を避ける&lt;/li&gt;
  &lt;li&gt;電力消費の少ない録画用 PC を常時起動しておき、メインの PC はいつでも電源を切れるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用-pc&quot;&gt;使用 PC&lt;/h2&gt;

&lt;p&gt;録画用 PC には、ほとんど使わないまま放置していた
Lenovo ThinkCentre M600 Tiny
を使用することにしました。
昨年メルカリで 15,000 円で購入したやつです。&lt;/p&gt;

&lt;p&gt;これは容積1リットルを謳う超小型デスクトップ PC で、
CPU は
&lt;a href=&quot;https://ark.intel.com/content/www/jp/ja/ark/products/91534/intel-celeron-processor-j3060-2m-cache-up-to-2-48-ghz.html&quot;&gt;Intel Celeron J3060&lt;/a&gt;
1.6GHz 2コア、TDP 6 W となっています。&lt;/p&gt;

&lt;h2 id=&quot;usb-接続の-tv-チューナーを購入したが&quot;&gt;USB 接続の TV チューナーを購入したが…&lt;/h2&gt;

&lt;p&gt;M600 Tiny は前述の通り超小型デスクトップ PC のため、
今まで使用していた PCI Express (以下 PCI-E) 接続の TV チューナーボードが利用できません。
また、しばらくはメイン PC での録画と平行運用して様子をみたかったため、別途 USB 接続の TV チューナーを購入しました。&lt;/p&gt;

&lt;p&gt;購入後1週間ほど使用してみましたが、
信号がドロップしているのか
時々ひどいブロックノイズが入り使い物になりません。
これは困りました。
PC を変えるか USB 接続でも安定する別のチューナーが必要です。&lt;/p&gt;

&lt;h2 id=&quot;pci-e-の-tv-チューナーを無理やり増設&quot;&gt;PCI-E の TV チューナーを無理やり増設&lt;/h2&gt;

&lt;p&gt;もう1つ思いついたのが
今まで使用していた PCI-E 接続の TV チューナーボードを
無理やり M600 Tiny に取り付けるというものです。&lt;/p&gt;

&lt;p&gt;最初は PCI-E を USB に変換するものがないか探していましたが、
M.2 の A &amp;amp; E キーに対応した以下の
M.2 → PCI-E x1 変換アダプタを見つけました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07L9RFVBZ&amp;amp;linkId=31ddd9c90c3fbc07e3d46e34298fdb14&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/M.2&quot;&gt;M.2&lt;/a&gt;
は物理的な接続方法が異なるだけで
PCI-E の信号をそのまま送ることができます。
M600 Tiny には Wi-Fi の増設用と思われる
E キーに対応した M.2 スロットがあるため、
そこにこの変換アダプタを接続すれば問題なく使用できるはずです。&lt;/p&gt;

&lt;p&gt;変換アダプタには 5 V と 12 V の電源を
FDD 4ピンコネクタで供給する必要があります。
光学ドライブなどに使用される4ピンペリフェラルコネクタから
FDD 4ピンコネクタへ変換するケーブルが付属していますが、
M600 Tiny にはどちらもありません。
そこで以下の変換ケーブルを購入し SATA から電源を取ることにしました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B0028WIES8&amp;amp;linkId=237de3b0f34f25bc2d854c0df081beac&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;SATA が使えなくなるため、ストレージはもともと付属していた SATA 接続の HDD をはずして M.2 の SSD にします。
(上記の Wi-Fi 用 M.2 とは別にもうひとつストレージ用の M.2 があります。)&lt;/p&gt;

&lt;h2 id=&quot;完成&quot;&gt;完成&lt;/h2&gt;

&lt;p&gt;変換アダプタを購入して実際に接続してみました。
内部は以下のようになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express1.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express1.jpg&quot; alt=&quot;PC 内部&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;背面の VGA (D-Sub 15 ピン) 端子が増設できる場所の板をはずして
ケーブルを外に出しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express2.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express2.jpg&quot; alt=&quot;ケーブルの外出し1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express3.jpg&quot; alt=&quot;ケーブルの外出し2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後に TV チューナーボードを取り付けて以下のようになりました。
PC を起動して確認しましたが問題なく認識され使用できました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express4.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express4.jpg&quot; alt=&quot;TV チューナーボードの取り付け&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のように超小型デスクトップ PC で
PCI-E 接続の TV チューナーボードを利用できました。&lt;/p&gt;

&lt;p&gt;Dell の Optiplex Micro も中身は似たような作りのため
おそらく同様に PCI-E のボードを増設できると思います。
HP の ProDesk DM や EliteDesk DM は中を見たことがないためわかりません。&lt;/p&gt;

&lt;p&gt;基板がむき出しのため今後ホコリへの対策を考えます。&lt;/p&gt;
</description>
                <pubDate>Sat, 18 Sep 2021 13:04:35 +0900</pubDate>
                <link>https://saasan.github.io/blog/2021/09/18/lenovo-thinkcentre-m600-tiny%E3%81%ABpci-express%E3%82%92%E7%84%A1%E7%90%86%E3%82%84%E3%82%8A%E5%A2%97%E8%A8%AD%E3%81%99%E3%82%8B.html</link>
                <guid isPermaLink="true">https://saasan.github.io/blog/2021/09/18/lenovo-thinkcentre-m600-tiny%E3%81%ABpci-express%E3%82%92%E7%84%A1%E7%90%86%E3%82%84%E3%82%8A%E5%A2%97%E8%A8%AD%E3%81%99%E3%82%8B.html</guid>
                
                <category>PC</category>
                
                
                <category>blog</category>
                
            </item>
        
    </channel>
</rss>
