<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>saasan.github.io</title>
    <description></description>
    <link>https://saasan.github.io/</link>
    <atom:link href="https://saasan.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Dec 2021 20:16:44 +0900</pubDate>
    <lastBuildDate>Tue, 21 Dec 2021 20:16:44 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>わたゆり「カフェ・リーベ女学園」の間取り図を作ってみた</title>
        <description>&lt;p&gt;最近「私の百合はお仕事です！」(わたゆり) にハマってます。
&lt;a href=&quot;https://www.ichijinsha.co.jp/yurihime/title/%e6%9c%aa%e5%b9%a1/%e7%a7%81%e3%81%ae%e7%99%be%e5%90%88%e3%81%af%e3%81%8a%e4%bb%95%e4%ba%8b%e3%81%a7%e3%81%99%ef%bc%81/&quot;&gt;公式サイトの紹介&lt;/a&gt;
を読めば分かる通り、
&lt;ruby&gt;姉妹&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;シュヴェスター&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
制度のある
&lt;ruby&gt;お嬢様学校&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ミッションスクール&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
「リーベ女学園」という設定で運営されている
コンセプトカフェを舞台とした作品です。&lt;/p&gt;

&lt;p&gt;ストーリーが良くて泣ける作品なのでぜひ読んでみてください。
今なら Amazon Prime で1、2巻が読み放題になっています。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B072KH2H5V&amp;amp;linkId=6f19c25541d8022627fc2e8a66573385&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B076F2DRBL&amp;amp;linkId=de5dc53d2d5358c2fc09428e9729c389&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;わたゆりは上記の通り「カフェ・リーベ女学園」が舞台となっており
多くのシーンがその中で展開されるため、
その間取りが分かればさらに理解が深まるかと思い間取り図を作成してみました。&lt;/p&gt;

&lt;h2 id=&quot;出典について&quot;&gt;出典について&lt;/h2&gt;

&lt;p&gt;以下の間取り図は
&lt;a href=&quot;https://www.amazon.co.jp/dp/B07878H4D9/?tag=saasan-22&quot;&gt;Amazon Kindle の電子書籍「私の百合はお仕事です！」&lt;/a&gt;
1～9巻を参考に
&lt;a href=&quot;https://twitter.com/saasan&quot;&gt;カガミ&lt;/a&gt;
が作成したものです。
公式な情報ではありませんので、間取り図について未幡先生や一迅社へ問い合わせないでください。&lt;/p&gt;

&lt;p&gt;ページ番号については、物理書籍と合わせるためページ内記載のものとしています。
Kindle の Android 版アプリで表示されるロケーションは、これに1を足した数値となります。&lt;/p&gt;

&lt;h2 id=&quot;間取り図&quot;&gt;間取り図&lt;/h2&gt;

&lt;p&gt;以下が作成した間取り図です。
&lt;a href=&quot;https://myhome-cloud.net/&quot;&gt;マイホームクラウド&lt;/a&gt;
で間取り図を作成したあと別のアプリで文字の追加など加工を行っています。&lt;/p&gt;

&lt;p&gt;リーベの背景は手で描かれているため、シーンによって物の大きさが異なることがあります。
間取り図の作成にあたっては複数のシーンを確認した上で、
大きな破綻がないよう一部調整しています。&lt;/p&gt;

&lt;p&gt;※2021/12/21追記: 背景は &lt;a href=&quot;https://twitter.com/n28miman/status/1473186141684002821&quot;&gt;途中から3Dに変更された&lt;/a&gt; とのことです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-12-19/liebe-layout.png&quot;&gt;&lt;img src=&quot;/img/blog/2021-12-19/liebe-layout.png&quot; alt=&quot;「カフェ・リーベ女学園」間取り図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;by-バックヤード&quot;&gt;BY (バックヤード)&lt;/h2&gt;

&lt;p&gt;サロンと並び頻繁に登場する場所のため
大まかな配置について特に異論はないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;by-内の小部屋&quot;&gt;BY 内の小部屋&lt;/h3&gt;

&lt;p&gt;BY 内にある小部屋 (※1) は作中で使用されておらず用途が分かりません。
壁には扉と手洗器、消毒液と思われるものが付いています。
扉に小窓が付いていることや (9巻120ページなど)、
手洗器と一緒に水周りとしてまとめられていると考えると
従業員用トイレでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;タイムレコーダー&quot;&gt;タイムレコーダー&lt;/h3&gt;

&lt;p&gt;間取り図に入っていない要素としてタイムレコーダー (打刻機) があります。
時計の下にあるキャビネットの上に置かれています (2巻99ページ)。
また、右にある柱にタイムカード入れがあります (3巻32ページ)。
作中では描かれていませんが、出退勤時にここで打刻していると思われます。&lt;/p&gt;

&lt;h2 id=&quot;サロン&quot;&gt;サロン&lt;/h2&gt;

&lt;p&gt;客席は5巻3ページに描かれている引きの絵を参考に、
対面2席のテーブルが左右に6つずつ、計24席としました。&lt;/p&gt;

&lt;p&gt;窓側に近い客席後ろの壁に鳩時計があります。 (1巻30ページ、2巻132ページ、9巻77ページなど)&lt;/p&gt;

&lt;h2 id=&quot;キッチン&quot;&gt;キッチン&lt;/h2&gt;

&lt;p&gt;キッチン内部やデシャップから繋がる部分は
作中であまり描かれていないため間違っているかもしれません。&lt;/p&gt;

&lt;p&gt;BY出入口右側にコンロとシンク (5巻77～78ページ)、左側に冷蔵庫があります (3巻34ページなど)。&lt;/p&gt;

&lt;p&gt;デシャップ側から入って右側にもシンクがあります。 (1巻107ページ、5巻78ページ)&lt;/p&gt;

&lt;p&gt;冷蔵庫と横にある作業台の中間、天井から吊られている棚にモニターが付いています。 (9巻120ページ)&lt;/p&gt;

&lt;h2 id=&quot;デシャップの右側にある扉&quot;&gt;デシャップの右側にある扉&lt;/h2&gt;

&lt;p&gt;デシャップの右側にある扉 (※2) は作中で使用されておらず用途が分かりません。
以下の理由からお客様用トイレでしょうか？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;飲食店のためお客様用トイレが必要&lt;/li&gt;
  &lt;li&gt;客席から近い&lt;/li&gt;
  &lt;li&gt;店の一番奥&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;レジ&quot;&gt;レジ&lt;/h2&gt;

&lt;p&gt;レジはBYへ入ってすぐ左側に置かれています。
雰囲気を損ねないため普段見えない場所に置かれているのだと思われますが、
客席か受付でお客様からお金を預かってBYへ持ち込み精算するかたちでしょうか？&lt;/p&gt;

&lt;p&gt;受付で精算の場合はお金を預かってBYへ持ち込むと
位置的にゲストからBY内が丸見えになってしまうため、
客席での精算のほうが有力かも？&lt;/p&gt;

&lt;h2 id=&quot;ピアノ左のテーブル&quot;&gt;ピアノ左のテーブル&lt;/h2&gt;

&lt;p&gt;ピアノ左にあるブルーメ選挙の投票箱が置かれていたテーブルは
選挙後も度々描かれており常設されているようです。
(9巻102ページなど)&lt;/p&gt;

&lt;h2 id=&quot;受付&quot;&gt;受付&lt;/h2&gt;

&lt;p&gt;受付にはレトロ風電話機が置かれています。
電話予約の対応は舞が行っていると7巻シフト36.2に書かれており、
Web受付の状況も確認しながら対応していると考えると
必然的にBYで受付を行う必要があります。
よってレトロ風電話機は雰囲気を出すための飾りと思われます。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;実際に使えるとしても舞さん以外かけ方が分からなそう。「21世紀少女たちめ…」&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;出入口&quot;&gt;出入口&lt;/h2&gt;

&lt;p&gt;出入口の扉は内側に開きます。 (5巻71ページ)&lt;/p&gt;

&lt;h2 id=&quot;作中で言及されているが場所不明のもの&quot;&gt;作中で言及されているが場所不明のもの&lt;/h2&gt;

&lt;h3 id=&quot;貴重品ロッカー&quot;&gt;貴重品ロッカー&lt;/h3&gt;

&lt;p&gt;3巻で果乃子のスマホが入れられた貴重品ロッカー。&lt;/p&gt;

&lt;h3 id=&quot;物置&quot;&gt;物置&lt;/h3&gt;

&lt;p&gt;ブルーメ選挙の投票箱が置かれている物置。
5巻88ページで舞が美月へ「ブルーメ選挙の投票箱を出すから見に来て」と言っています。
BYで「見に来て」と言っていることからBY外にあると思われます。&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Dec 2021 16:50:36 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/12/19/%E3%82%8F%E3%81%9F%E3%82%86%E3%82%8A-%E3%82%AB%E3%83%95%E3%82%A7-%E3%83%AA%E3%83%BC%E3%83%99%E5%A5%B3%E5%AD%A6%E5%9C%92-%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A%E5%9B%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/12/19/%E3%82%8F%E3%81%9F%E3%82%86%E3%82%8A-%E3%82%AB%E3%83%95%E3%82%A7-%E3%83%AA%E3%83%BC%E3%83%99%E5%A5%B3%E5%AD%A6%E5%9C%92-%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A%E5%9B%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F.html</guid>
        
        <category>本</category>
        
        <category>私の百合はお仕事です！</category>
        
        <category>わたゆり</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Lenovo ThinkCentre M600 Tiny に PCI Express を無理やり増設する</title>
        <description>&lt;p&gt;5年ほど前に組んだ自作 PC がスペック的につらくなってきたため
新しいものを組むことにしました。
PC 入れ替えにあたり、これまで1台で
ゲーム、開発、TV 録画などすべて行っていた状態から録画機能を切り離し、
録画専用 PC として分けることにしました。&lt;/p&gt;

&lt;p&gt;目的は以下のとおりです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PC 交換時の録画への影響を最小限にする&lt;/li&gt;
  &lt;li&gt;ゲームなどの高負荷による録画への影響を避ける&lt;/li&gt;
  &lt;li&gt;電力消費の少ない録画用 PC を常時起動しておき、メインの PC はいつでも電源を切れるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用-pc&quot;&gt;使用 PC&lt;/h2&gt;

&lt;p&gt;録画用 PC には、ほとんど使わないまま放置していた
Lenovo ThinkCentre M600 Tiny
を使用することにしました。
昨年メルカリで 15,000 円で購入したやつです。&lt;/p&gt;

&lt;p&gt;これは容積1リットルを謳う超小型デスクトップ PC で、
CPU は
&lt;a href=&quot;https://ark.intel.com/content/www/jp/ja/ark/products/91534/intel-celeron-processor-j3060-2m-cache-up-to-2-48-ghz.html&quot;&gt;Intel Celeron J3060&lt;/a&gt;
1.6GHz 2コア、TDP 6 W となっています。&lt;/p&gt;

&lt;h2 id=&quot;usb-接続の-tv-チューナーを購入したが&quot;&gt;USB 接続の TV チューナーを購入したが…&lt;/h2&gt;

&lt;p&gt;M600 Tiny は前述の通り超小型デスクトップ PC のため、
今まで使用していた PCI Express (以下 PCI-E) 接続の TV チューナーボードが利用できません。
また、しばらくはメイン PC での録画と平行運用して様子をみたかったため、別途 USB 接続の TV チューナーを購入しました。&lt;/p&gt;

&lt;p&gt;購入後1週間ほど使用してみましたが、
信号がドロップしているのか
時々ひどいブロックノイズが入り使い物になりません。
これは困りました。
PC を変えるか USB 接続でも安定する別のチューナーが必要です。&lt;/p&gt;

&lt;h2 id=&quot;pci-e-の-tv-チューナーを無理やり増設&quot;&gt;PCI-E の TV チューナーを無理やり増設&lt;/h2&gt;

&lt;p&gt;もう1つ思いついたのが
今まで使用していた PCI-E 接続の TV チューナーボードを
無理やり M600 Tiny に取り付けるというものです。&lt;/p&gt;

&lt;p&gt;最初は PCI-E を USB に変換するものがないか探していましたが、
M.2 の A &amp;amp; E キーに対応した以下の
M.2 → PCI-E x1 変換アダプタを見つけました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07L9RFVBZ&amp;amp;linkId=31ddd9c90c3fbc07e3d46e34298fdb14&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/M.2&quot;&gt;M.2&lt;/a&gt;
は物理的な接続方法が異なるだけで
PCI-E の信号をそのまま送ることができます。
M600 Tiny には Wi-Fi の増設用と思われる
E キーに対応した M.2 スロットがあるため、
そこにこの変換アダプタを接続すれば問題なく使用できるはずです。&lt;/p&gt;

&lt;p&gt;変換アダプタには 5 V と 12 V の電源を
FDD 4ピンコネクタで供給する必要があります。
光学ドライブなどに使用される4ピンペリフェラルコネクタから
FDD 4ピンコネクタへ変換するケーブルが付属していますが、
M600 Tiny にはどちらもありません。
そこで以下の変換ケーブルを購入し SATA から電源を取ることにしました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=saasan-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B0028WIES8&amp;amp;linkId=237de3b0f34f25bc2d854c0df081beac&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;SATA が使えなくなるため、ストレージはもともと付属していた SATA 接続の HDD をはずして M.2 の SSD にします。
(上記の Wi-Fi 用 M.2 とは別にもうひとつストレージ用の M.2 があります。)&lt;/p&gt;

&lt;h2 id=&quot;完成&quot;&gt;完成&lt;/h2&gt;

&lt;p&gt;変換アダプタを購入して実際に接続してみました。
内部は以下のようになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express1.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express1.jpg&quot; alt=&quot;PC 内部&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;背面の VGA (D-Sub 15 ピン) 端子が増設できる場所の板をはずして
ケーブルを外に出しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express2.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express2.jpg&quot; alt=&quot;ケーブルの外出し1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express3.jpg&quot; alt=&quot;ケーブルの外出し2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後に TV チューナーボードを取り付けて以下のようになりました。
PC を起動して確認しましたが問題なく認識され使用できました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express4.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/blog/2021-09-18/thinkcentre-tiny-pci-express4.jpg&quot; alt=&quot;TV チューナーボードの取り付け&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のように超小型デスクトップ PC で
PCI-E 接続の TV チューナーボードを利用できました。&lt;/p&gt;

&lt;p&gt;Dell の Optiplex Micro も中身は似たような作りのため
おそらく同様に PCI-E のボードを増設できると思います。
HP の ProDesk DM や EliteDesk DM は中を見たことがないためわかりません。&lt;/p&gt;

&lt;p&gt;基板がむき出しのため今後ホコリへの対策を考えます。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Sep 2021 13:04:35 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/09/18/lenovo-thinkcentre-m600-tiny%E3%81%ABpci-express%E3%82%92%E7%84%A1%E7%90%86%E3%82%84%E3%82%8A%E5%A2%97%E8%A8%AD%E3%81%99%E3%82%8B.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/09/18/lenovo-thinkcentre-m600-tiny%E3%81%ABpci-express%E3%82%92%E7%84%A1%E7%90%86%E3%82%84%E3%82%8A%E5%A2%97%E8%A8%AD%E3%81%99%E3%82%8B.html</guid>
        
        <category>PC</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>M5Stack ATOM Lite 用の開発環境構築</title>
        <description>&lt;p&gt;M5StickC 1台だけだと用途ごとにプログラムを転送し直す必要があり手間がかかるので
ATOM Lite を購入してみた。&lt;/p&gt;

&lt;p&gt;先日 PC を変えたこともあり
再度 Arduino IDE での開発環境を構築する必要があったため
手順を備忘録として残しておく。&lt;/p&gt;

&lt;p&gt;内容は基本的に
&lt;a href=&quot;https://docs.m5stack.com/en/arduino/arduino_development&quot;&gt;m5-docs&lt;/a&gt;
と同じ。
PC は Windows 10。&lt;/p&gt;

&lt;h2 id=&quot;ドライバーと-arduino-ide-のインストール&quot;&gt;ドライバーと Arduino IDE のインストール&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ATOM Lite を PC へ接続し、デバイスマネージャーで “USB Serial Port” が追加されているか確認。&lt;br /&gt;
“M5Stack” という名前のデバイスに黄色い “！” が付いていたらドライバーがインストールされていない。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ドライバーが自動でインストールされない場合は
&lt;a href=&quot;https://ftdichip.com/drivers/vcp-drivers/&quot;&gt;VCP Drivers - FTDI&lt;/a&gt;
からダウンロードしてインストール。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“USB Serial Port” が表示されたら COM の番号を覚えておく。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/en/software&quot;&gt;Arduino IDE&lt;/a&gt; をダウンロードしてインストール。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ボードの設定&quot;&gt;ボードの設定&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Arduino IDE を起動。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [ファイル] &amp;gt; [環境設定] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[追加のボードマネージャのURL] に以下を入力。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/arduino/package_m5stack_index.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[OK] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [ツール] &amp;gt; [ボード] &amp;gt; [ボードマネージャ…] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“M5Stack” で検索。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表示された “M5Stack” を [インストール]。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;インストールが完了したらボードマネージャを閉じる。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [ツール] &amp;gt; [ボード] &amp;gt; [M5Stack Arduino] &amp;gt;[M5Stack-ATOM] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ウィンドウ下部に [M5Stack-ATOM] と表示されていることを確認。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ライブラリのインクルード&quot;&gt;ライブラリのインクルード&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [スケッチ] &amp;gt; [ライブラリをインクルード] &amp;gt; [ライブラリを管理…] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“M5Atom” で検索。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表示された “M5Atom” を [インストール]。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Dependencies for library M5Atom” というウィンドウが表示されたら [Install all] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;インストールが完了したらライブラリマネージャを閉じる。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;スケッチの書き込みと動作確認&quot;&gt;スケッチの書き込みと動作確認&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [ツール] &amp;gt; [シリアルポート] で ATOM Lite の COM 番号をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ウィンドウ下部に選択した COM 番号が表示されていることを確認。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;メニューの [ファイル] &amp;gt;  [スケッチ例] &amp;gt; [M5Atom] &amp;gt; [Basics] &amp;gt; [Button] をクリック。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ツールバーの左から2番目にある右矢印か、メニューの [スケッチ] &amp;gt;  [マイコンボードに書き込む] をクリック。 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + U&lt;/code&gt; でも可)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“ボードへの書き込みが完了しました。” が表示されるまで待つ。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;書き込みが完了したら ATOM Lite のボタンを押し LED の色が変わることを確認。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上で ATOM Lite を使う準備が整った。&lt;/p&gt;

&lt;h2 id=&quot;リビルドが遅い場合の設定&quot;&gt;リビルドが遅い場合の設定&lt;/h2&gt;

&lt;p&gt;同じスケッチで2回目以降のビルドが遅い場合は、以下のサイトを参考に設定すると良い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hangstuck.com/arduino-buildpath-fix/&quot;&gt;Arduino IDEのビルドを速くする｜オブジェクトファイルの出力先を固定する | ハングスタック&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Aug 2021 16:33:22 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/08/14/m5stack-atom-lite%E7%94%A8%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/08/14/m5stack-atom-lite%E7%94%A8%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html</guid>
        
        <category>M5Stack</category>
        
        <category>ATOM-Lite</category>
        
        <category>ESP32</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Slack へ通知するシェルスクリプト</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://qiita.com/piroor/items/77233173707a0baa6360&quot;&gt;プログラマーの君！ 騙されるな！ シェルスクリプトはそう書いちゃ駄目だ！！ という話 - Qiita&lt;/a&gt;
を読み、シェルスクリプトで関数へ値を渡す際は
引数よりも標準入出力を使ったほうがシンプルに書けるようだったので、
以前書いた Slack へ通知メッセージを送るスクリプトを書き直してみた。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#!/bin/bash

WEBHOOK_URL=https://hooks.slack.com/services/xxxxxxxxxxx/xxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx

post_slack() {
    echo &amp;quot;payload={\&amp;quot;text\&amp;quot;: \&amp;quot;$(cat)\&amp;quot;}&amp;quot; | curl -s -S -X POST -d @- ${WEBHOOK_URL}
}

echo &amp;quot;&amp;lt;!here&amp;gt;\nhoge\nfuga&amp;quot; | post_slack
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/saasan/cbca2f81a3d39ea6dfa85ada5460cf33.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;post_slack では以下のかたちで処理している。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;cat で標準入力から取り込んだ文字列を echo で結合し JSON を作成する。&lt;/li&gt;
  &lt;li&gt;それをパイプで curl へ渡す。&lt;/li&gt;
  &lt;li&gt;curl では &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d @-&lt;/code&gt; で標準入力から取り込んだ文字列を POST する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;標準入出力をパイプで繋ぐかたちとすることで、
以前は10行あった post_slack が3行に短縮された。&lt;/p&gt;
</description>
        <pubDate>Thu, 20 May 2021 23:59:43 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/05/20/slack%E3%81%B8%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/05/20/slack%E3%81%B8%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.html</guid>
        
        <category>Linux</category>
        
        <category>Bash</category>
        
        <category>シェルスクリプト</category>
        
        <category>Slack</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>M5StickC でキーボード操作を自動化する</title>
        <description>&lt;p&gt;某ゲームでアイテムを交換する作業が面倒になってきたので
キーボード操作を自動化したいと思った。&lt;/p&gt;

&lt;p&gt;まず思いついたのは、手元にあった
&lt;a href=&quot;https://www.amazon.co.jp/dp/B004INFZEG/saasan-22&quot;&gt;サンワサプライ製のプログラマブルテンキー NT-19UH2BK&lt;/a&gt;。
久しぶりに引っぱりだして確認したところ、これは &lt;kbd&gt;Ctrl + C&lt;/kbd&gt; のような同時押しには対応しているが、
ウェイトをはさみながら複数のキーを順次入力する用途には対応していなかった。&lt;/p&gt;

&lt;p&gt;次に &lt;a href=&quot;https://booth.pm/ja/items/2655838&quot;&gt;AZ-Macro&lt;/a&gt;
というマクロ機能のある自作 Bluetooth キーボードキットがあることを思い出した。
これは ESP32 で作られていて、
&lt;a href=&quot;https://github.com/palette-system/az-macro&quot;&gt;ファームウェアのソースコードも公開&lt;/a&gt;
されている。
手持ちの M5StickC なら同じ ESP32 が内蔵されており
Bluetooth にも対応しているため、目的を実現できるのではないか？&lt;/p&gt;

&lt;p&gt;ということで、M5StickC を Bluetooth キーボードとして PC へ接続し操作を自動化する。&lt;/p&gt;

&lt;h2 id=&quot;arduino-ide-へ-esp32-ble-keyboard-をインストール&quot;&gt;Arduino IDE へ ESP32-BLE-Keyboard をインストール&lt;/h2&gt;

&lt;p&gt;まずは M5StickC を Bluetooth キーボードとして使うためのライブラリを
Arduino IDE へインストールする。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/T-vK/ESP32-BLE-Keyboard/releases&quot;&gt;Releases · T-vK/ESP32-BLE-Keyboard&lt;/a&gt;
から ESP32-BLE-Keyboard.zip をダウンロード&lt;/li&gt;
  &lt;li&gt;Arduino IDE のメニューで [スケッチ] - [ライブラリをインクルード] - [.ZIP形式のライブラリをインストール…] をクリック&lt;/li&gt;
  &lt;li&gt;さきほどダウンロードした ESP32-BLE-Keyboard.zip を選択&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;esp32-ble-keyboard-の使い方&quot;&gt;ESP32-BLE-Keyboard の使い方&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/T-vK/ESP32-BLE-Keyboard/blob/master/examples/SendKeyStrokes/SendKeyStrokes.ino&quot;&gt;公式のサンプル&lt;/a&gt;
を見れば大まかな使い方はわかると思うが、メソッドの説明がないので補足しておく。&lt;/p&gt;

&lt;p&gt;BleKeyboard クラスの以下のメソッドでキーを操作できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;print: 文字列を入力&lt;/li&gt;
  &lt;li&gt;write: キーを押してすぐに離す&lt;/li&gt;
  &lt;li&gt;press: キーを押す (release するまで押したままにする)&lt;/li&gt;
  &lt;li&gt;release: キーを離す&lt;/li&gt;
  &lt;li&gt;releaseAll: すべてのキーを離す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キーの指定は、英数記号の場合、文字をそのまま渡す。
大文字を渡すと自動でシフトキーが補完され大文字での入力になる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bleKeyboard.write('a');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ファンクションキー、修飾キーなどの場合は
&lt;a href=&quot;https://github.com/T-vK/ESP32-BLE-Keyboard/blob/master/BleKeyboard.h&quot;&gt;BleKeyboard.h&lt;/a&gt;
で定義されている定数を渡す。&lt;/p&gt;

&lt;h2 id=&quot;スケッチの作成&quot;&gt;スケッチの作成&lt;/h2&gt;

&lt;p&gt;M5StickC のボタンA (正面の「M5」ボタン) を押すと
500ms 間隔で順番に B, L, E, Enterキーを押すサンプルスケッチを作成した。
今回は同時押しが不要だったため
keystroke に書かれたキーを順に write で出力するだけとなっている。&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#include &amp;lt;vector&amp;gt;
#include &amp;lt;M5StickC.h&amp;gt;
#include &amp;lt;BleKeyboard.h&amp;gt;

// -----------------------------------------------------------------------------
// 定数
// -----------------------------------------------------------------------------
// 電源ボタンが1秒未満押された
const uint8_t AXP_WAS_PRESSED = 2;
// キーと待ち時間の構造体
struct Key {
  uint8_t key;
  uint32_t delay;
};
// 送信するキーストローク
const std::vector&amp;lt;Key&amp;gt; keystroke = {
    { &amp;#39;B&amp;#39;       , 500 },
    { &amp;#39;L&amp;#39;       , 500 },
    { &amp;#39;E&amp;#39;       , 500 },
    { KEY_RETURN, 0 }
};

// -----------------------------------------------------------------------------
// 変数
// -----------------------------------------------------------------------------
// ESP32-BLE-Keyboard
BleKeyboard bleKeyboard;

// -----------------------------------------------------------------------------
// 関数
// -----------------------------------------------------------------------------
// 画面を消去する
void clearScreen() {
    M5.Lcd.fillScreen(TFT_BLACK);
    M5.Lcd.setCursor(0, 0);
}

// キーストロークを送信する
void sendKeystroke() {
    clearScreen();
    M5.Lcd.println(&amp;quot;Sending...&amp;quot;);

    for (const auto&amp;amp; n : keystroke) {
        bleKeyboard.write(n.key);
        delay(n.delay);
    }

    M5.Lcd.println(&amp;quot;Complete!&amp;quot;);
}

void setup() {
    M5.begin();

    // 画面の表示設定
    M5.Lcd.setRotation(1);
    M5.Lcd.setTextFont(2);
    clearScreen();
    M5.Lcd.println(&amp;quot;ESP32-BLE-Keyboard&amp;quot;);

    // Bluetooth接続
    bleKeyboard.begin();
}

void loop() {
    M5.update();

    // 電源ボタンが押されたらリセット
    if (M5.Axp.GetBtnPress() == AXP_WAS_PRESSED) {
        esp_restart();
    }

    if (bleKeyboard.isConnected()) {
        // Bluetooth接続済みの場合
        // ボタンAが押されたらキーを送信
        if (M5.BtnA.wasPressed()) {
            sendKeystroke();
        }

        delay(10);
    }
    else {
        // Bluetooth未接続の場合は5秒待つ
        M5.Lcd.println(&amp;quot;Waiting 5 seconds...&amp;quot;);
        delay(5000);
    }
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/saasan/95c34469ebd1186c12398fbeb8266d17.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;動作確認&quot;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;以下の手順で動作を確認できる。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;M5StickC にスケッチを書き込む&lt;/li&gt;
  &lt;li&gt;M5StickC の画面に “Waiting 5 seconds…” と表示されていることを確認&lt;/li&gt;
  &lt;li&gt;PC で Bluetooth デバイスを検索し “ESP32 BLE Keyboard” へ接続&lt;/li&gt;
  &lt;li&gt;メモ帳などのアプリを開く&lt;/li&gt;
  &lt;li&gt;M5StickC のボタンA (正面の「M5」ボタン) を押す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで複雑なキーボードマクロでも思い通りに実行できるようになった。
キーボードでできることなら何でもボタン一発で実行できるため、
思っていた以上に利便性が高い。&lt;/p&gt;

&lt;h2 id=&quot;参考サイト&quot;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://neocat.hatenablog.com/entry/2019/09/28/151947&quot;&gt;ESP32をBluetoothキーボードやマウスにする - Okiraku Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/T-vK/ESP32-BLE-Keyboard&quot;&gt;T-vK/ESP32-BLE-Keyboard: Bluetooth LE Keyboard library for the ESP32 (Arduino IDE compatible)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Apr 2021 05:50:17 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/04/04/m5stickc%E3%81%A7%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E6%93%8D%E4%BD%9C%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8B.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/04/04/m5stickc%E3%81%A7%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E6%93%8D%E4%BD%9C%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8B.html</guid>
        
        <category>M5Stack</category>
        
        <category>M5StickC</category>
        
        <category>ESP32</category>
        
        <category>ESP32-BLE-Keyboard</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>M5StickC で毎朝照明を自動で点灯する</title>
        <description>&lt;p&gt;最近寒いのでカーテンを遮光・遮熱のものに変えた。
遮熱のほうはあまり実感がないが遮光のほうはばっちりで、
昼間でもカーテンを閉めれば部屋がかなり暗くなる。&lt;/p&gt;

&lt;p&gt;寝てる間は暗くてよいのだが、
朝になっても明るさで自然に目が覚めるということがなくなった。
時計を見ないと大まかな時間すら分からないのは思いの外不便だ。
そこで、以前購入した M5StickC を使って
毎朝自動で照明を点灯させることを思いついた。&lt;/p&gt;

&lt;h2 id=&quot;使用する照明器具とリモコン&quot;&gt;使用する照明器具とリモコン&lt;/h2&gt;

&lt;p&gt;私の部屋の照明はNECライティング(現ホタルクス)の
&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B07SS94YPN/saasan-22&quot;&gt;LEDシーリングライトHLDX0801&lt;/a&gt;
を使用している。
昨年買い換えたのだが、
これはシーリングライトとしてはかなりの薄型で、
引掛シーリングと合わせても高さ6cmくらいしかない。
以前使用していたものは高さ15cmほどあったため、
圧迫感がなくなり気に入っている。
唯一の不満点はリモコンが付属していないことで、別途
&lt;a href=&quot;https://www.amazon.co.jp/dp/B075FBKZBT/saasan-22&quot;&gt;RE0206&lt;/a&gt;
を購入し使用している。&lt;/p&gt;

&lt;h2 id=&quot;リモコンの信号解析&quot;&gt;リモコンの信号解析&lt;/h2&gt;

&lt;p&gt;まずは点灯時に RE0206 から発信される赤外線信号を調べるため
&lt;a href=&quot;https://www.amazon.co.jp/dp/B07Z621FQC/saasan-22&quot;&gt;Grove 接続の IR ユニット&lt;/a&gt;
を購入した。
M5StickC 単体でも赤外線の発信はできるが、受信はできないため、
リモコンの信号を調べる場合は別途購入する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://siroitori.hatenablog.com/entry/2020/04/25/114250&quot;&gt;M5StickC／M5Stack Fireで赤外線リモコンを作ろうと四苦八苦したのでメモ - カワリモノ息子の技術メモ的な〜&lt;/a&gt;
を参考に Arduino IDE から
IRremoteESP8266 をインストールし、スケッチ例の IRvecvDumpV3 を開く。
kRecvPin を 33 に変更して M5StickC へ書き込んだあと、
IR ユニットへ向けてリモコンのボタンを押すと
シリアルモニタへ信号が表示された。&lt;/p&gt;

&lt;p&gt;赤外線リモコンの信号にはいくつか種類があるらしいが、
NEC製品なので当然NECフォーマットだった。&lt;/p&gt;

&lt;h2 id=&quot;スケッチの作成&quot;&gt;スケッチの作成&lt;/h2&gt;

&lt;p&gt;M5StickC で設定時刻に赤外線信号を送信するスケッチを作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/saasan/m5stickc-ir-timer&quot;&gt;saasan/m5stickc-ir-timer: M5StickCで設定時刻に赤外線信号を送信する&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;M5StickC.h&amp;gt;
#include &amp;lt;WiFi.h&amp;gt;
#include &amp;lt;IRremoteESP8266.h&amp;gt;
#include &amp;lt;IRsend.h&amp;gt;
#include &quot;wifi-ssid.h&quot;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 定数&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 赤外線LEDのピン番号&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// M5StickC内蔵の赤外線LEDを使用する場合は9&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Grove接続のIRユニットを使用する場合は32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IR_SEND_PIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 赤外線送信するデータ&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IR_SEND_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41B6659A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// GMTからの時間差(秒)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// NTPサーバ&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTP_SERVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ntp.nict.jp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 電源ボタンが1秒未満押された&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXP_WAS_PRESSED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ボタンが長押しされたと判定する時間(ms)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUTTON_PRESSED_MS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 最後にボタンを押してから画面を省電力にするまでの時間(ms)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_OFF_MS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 通常時の画面輝度&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_ON_BRIGHTNESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 省電力時の画面輝度&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_OFF_BRIGHTNESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 変数&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// IRremoteESP8266のIRsendクラス&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IRsend&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;irsend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IR_SEND_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 現在時刻&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;tm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 赤外線送信する時刻の時間&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 赤外線送信する時刻の分&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 赤外線送信済みならtrue&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ir_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 最後にボタンが押された時間&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_pressed_millis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 関数&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 現在時刻を表示&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; now:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  %04d/%02d/%02d %02d:%02d:%02d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; timer:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  %02d:%02d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_mon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_mday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 無線LAN接続&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectWiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connecting to %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WL_CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;connected!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 画面の輝度を上げる&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;screenOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Axp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ScreenBreath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCREEN_ON_BRIGHTNESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;button_pressed_millis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 画面の輝度を下げる&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;screenOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Axp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ScreenBreath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCREEN_OFF_BRIGHTNESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 画面の表示設定&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTextFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ピンモードの設定&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pinMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IR_SEND_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 無線LANへ接続&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connectWiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFI_SSID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIFI_PASSPHRASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// NTPの設定&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTP_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;button_pressed_millis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ボタンAが押されたらアラーム時刻の時間を変更&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BtnA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BtnA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressedFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUTTON_PRESSED_MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;screenOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ボタンBが押されたらアラーム時刻の分を変更&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BtnB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BtnB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressedFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUTTON_PRESSED_MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;screenOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 電源ボタンが押されたらリセット&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Axp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBtnPress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXP_WAS_PRESSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;esp_restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 現在時刻を取得&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getLocalTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 最後にボタンを押してから時間が経過している場合は画面を省電力化&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_pressed_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_OFF_MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 赤外線送信していなければ電源ON信号を送信&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ir_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;irsend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendNEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IR_SEND_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ir_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ir_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;IR_SEND_DATA の 0x41B6659A が上記で解析した点灯するための信号で、
これを IRsend クラスの sendNEC メソッドで送信している。&lt;/p&gt;

&lt;p&gt;タイマーの時刻は
ボタンA(正面の「M5」ボタン)で時、
ボタンB(側面の小さいボタン)で分を変更できるようにした。&lt;/p&gt;

&lt;p&gt;送信するリモコンの信号を変えればいろいろと応用できそう。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 10:05:33 +0900</pubDate>
        <link>https://saasan.github.io/blog/2021/01/03/m5stickc%E3%81%A7%E6%AF%8E%E6%9C%9D%E7%85%A7%E6%98%8E%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7%E7%82%B9%E7%81%AF%E3%81%99%E3%82%8B.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2021/01/03/m5stickc%E3%81%A7%E6%AF%8E%E6%9C%9D%E7%85%A7%E6%98%8E%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7%E7%82%B9%E7%81%AF%E3%81%99%E3%82%8B.html</guid>
        
        <category>M5Stack</category>
        
        <category>M5StickC</category>
        
        <category>ESP32</category>
        
        <category>IRremoteESP8266</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>消してしまった WSL 環境のバックアップからファイルを取り出す</title>
        <description>&lt;p&gt;PC を新しいものへ移行する際に WSL 環境の中身を移行するのを忘れていた。
というか、別の環境に最新のファイルがあると思い込んでいたので敢えて移行しなかったのだ。
実際は自分の旧 PC の WSL 環境にあったものが最新のファイルで、
それに気付いたときにはディスクの初期化が済んでいた。&lt;/p&gt;

&lt;p&gt;旧 PC の Ubuntu 内には作業中のファイルがあり、
これが消えてしまうと10時間ほどかけた作業が無駄になってしまう。
こんなこともあろうかと、旧 PC のディスクを
&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/disk2vhd&quot;&gt;Disk2vhd&lt;/a&gt;
で VHDX ファイル化したものは残しておいたので、
このバックアップファイルから必要なファイルを取り出すことにした。&lt;/p&gt;

&lt;h2 id=&quot;旧-pc-のバックアップから-ubuntu-のディスクイメージを探す&quot;&gt;旧 PC のバックアップから Ubuntu のディスクイメージを探す&lt;/h2&gt;

&lt;p&gt;まずは旧 PC のバックアップから Ubuntu のディスクイメージを探す。
VHDX ファイルをダブルクリックすると自動でマウントされるので
その中を探したところ以下のパスにディスクイメージがあった。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\Users\ユーザー名\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;このファイルをマウントして中身を取り出して完了かと思ったら、
ファル名通りファイルシステムが ext4 だからなのか
Windows ではマウントできなかった。&lt;/p&gt;

&lt;p&gt;しかたないので新 PC の WSL へ新しいディストリビューションを入れて
ext4.vhdx を置き換えることにする。&lt;/p&gt;

&lt;h2 id=&quot;alpine-wsl-をインストールする&quot;&gt;Alpine WSL をインストールする&lt;/h2&gt;

&lt;p&gt;ext4.vhdx からファイルを取り出すため
&lt;a href=&quot;https://www.microsoft.com/ja-jp/p/alpine-wsl/9p804crf0395?activetab=pivot:overviewtab&quot;&gt;Alpine WSL&lt;/a&gt;
をインストールした。
これはおそらく新 PC で使ってないディストリビューションならなんでもいい。
新 PC でも既に Ubuntu を使い始めていたのでそれ以外で、
インストール作業に時間をかけたくないこともあり
軽量なことで有名な Alpine Linux を選択した。&lt;/p&gt;

&lt;p&gt;インストール後、念のため一度起動して初期設定を行っておく。&lt;/p&gt;

&lt;h2 id=&quot;wsl-のサービスを停止して-ext4vhdx-を置き換える&quot;&gt;WSL のサービスを停止して ext4.vhdx を置き換える&lt;/h2&gt;

&lt;p&gt;WSL のサービスが起動したままだとファイルがロックされていて置き換えられない。
コマンドプロンプトか PowerShell を管理者権限で起動し、
以下のコマンドで WSL のサービスを止める。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net stop LxssManager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に以下のパスにある Alpine WSL の ext4.vhdx
を旧 PC のバックアップから取り出したもので置き換える。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\Users\ユーザー名\AppData\Local\Packages\36828agowa338.AlpineWSL_my43bytk1c4nr\LocalState\ext4.vhdx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最後に以下のコマンドで WSL のサービスを起動する。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net start LxssManager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;必要なファイルを取り出す&quot;&gt;必要なファイルを取り出す&lt;/h2&gt;

&lt;p&gt;あとは alpine コマンドで起動し旧 PC の
Ubuntu 環境へ入ってファイルを取り出すことができた。&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Dec 2020 22:44:17 +0900</pubDate>
        <link>https://saasan.github.io/blog/2020/12/25/%E6%B6%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9Fwsl%E7%92%B0%E5%A2%83%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2020/12/25/%E6%B6%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9Fwsl%E7%92%B0%E5%A2%83%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99.html</guid>
        
        <category>Windows</category>
        
        <category>WSL</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>最近知った Bash の便利機能</title>
        <description>&lt;h2 id=&quot;cd--&quot;&gt;cd -&lt;/h2&gt;

&lt;p&gt;一つ前のディレクトリへ戻る。&lt;/p&gt;

&lt;p&gt;pushd / popd で2つのディレクトリを往復することがあったけどこっちのほうが速い。&lt;/p&gt;

&lt;h1 id=&quot;ctrl--u-ctrl--y&quot;&gt;Ctrl + u, Ctrl + y&lt;/h1&gt;

&lt;p&gt;&lt;kbd&gt;Ctrl + u&lt;/kbd&gt; でカーソル位置から行頭まで切り取る。
&lt;kbd&gt;Ctrl + y&lt;/kbd&gt; で切り取ったものを貼り付ける。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;git commit -m &quot;hoge&quot;&lt;/kbd&gt; とか書いたところで &lt;kbd&gt;git add&lt;/kbd&gt; してないことに気付いたりとか、
コマンド入力中に別のコマンドを先に実行したくなったときに便利。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;kbd&gt;Ctrl + k&lt;/kbd&gt; ならカーソル位置から行末まで切り取れる。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2020 23:25:18 +0900</pubDate>
        <link>https://saasan.github.io/blog/2020/12/16/%E6%9C%80%E8%BF%91%E7%9F%A5%E3%81%A3%E3%81%9Fbash%E3%81%AE%E4%BE%BF%E5%88%A9%E6%A9%9F%E8%83%BD.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2020/12/16/%E6%9C%80%E8%BF%91%E7%9F%A5%E3%81%A3%E3%81%9Fbash%E3%81%AE%E4%BE%BF%E5%88%A9%E6%A9%9F%E8%83%BD.html</guid>
        
        <category>Linux</category>
        
        <category>Bash</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>スタートメニューから消えた Dell Command | Update を復活させる</title>
        <description>&lt;p&gt;Dell Command | Update を実行したあとにスタートメニューから Dell Command | Update が消えることがある。&lt;/p&gt;

&lt;p&gt;しばらく待っていれば自動で復活することもあれば復活しないこともある。
復活しないときは一度アンインストールして
&lt;a href=&quot;https://www.dell.com/support/article/ja-jp/sln311129/dell-command-update?lang=ja&quot;&gt;Dell のサイトからダウンロード&lt;/a&gt;
したものを入れ直していたが、けっこう手間がかかって面倒だった。
そもそもアプリの一覧に残ってるならもっと簡単に復活できるんじゃないか？&lt;/p&gt;

&lt;p&gt;そう思ってスタートメニューだけ復活させる方法がないか調べたら以下の方法で復活できた。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;管理者権限で PowerShell を起動する。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以下のコマンドを実行する。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ManifestPath = (Get-AppxPackage -AllUsers -Name &quot;DellInc.DellCommandUpdate&quot;).InstallLocation + &quot;\Appxmanifest.xml&quot;
Add-AppxPackage -Path $ManifestPath -Register -DisableDevelopmentMode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※Get-AppxPackage に -AllUsers オプションを付けて実行するのに管理者権限が必要。&lt;/p&gt;

&lt;p&gt;参考 : &lt;a href=&quot;https://docs.microsoft.com/ja-jp/powershell/module/appx/add-appxpackage?view=winserver2012r2-ps#example-2&quot;&gt;Add-AppxPackage (AppX) | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Nov 2020 00:46:11 +0900</pubDate>
        <link>https://saasan.github.io/blog/2020/11/14/%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%8B%E3%82%89%E6%B6%88%E3%81%88%E3%81%9F-dell-command-update-%E3%82%92%E5%BE%A9%E6%B4%BB%E3%81%95%E3%81%9B%E3%82%8B.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2020/11/14/%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%8B%E3%82%89%E6%B6%88%E3%81%88%E3%81%9F-dell-command-update-%E3%82%92%E5%BE%A9%E6%B4%BB%E3%81%95%E3%81%9B%E3%82%8B.html</guid>
        
        <category>PC</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>USB CABLE CHECKER 2 で USB Type-C ケーブルの性能を確認する</title>
        <description>&lt;p&gt;先日 RAVPower 製 90W USB PD 充電器 RP-PC128 を買いました。
同じく RAVPower 製の 61W USB PD 充電器 PR-PC112 を持っていたのですが、
65W を要求する Dell 製ノート PC に給電しながら電源を入れると
途中で電力が足りない旨メッセージが表示されて起動が一時停止したり、
Windows 10 起動後も電力不足の通知が表示されるという状態で煩わしかったためです。&lt;/p&gt;

&lt;p&gt;eMarker 付きのケーブルを持っていなかったので
RAMPOW という謎のメーカーの PD 3.0 / USB 3.1 Gen2 対応を謳う USB Type-C ケーブルと
Bit Trade One の
&lt;a href=&quot;https://bit-trade-one.co.jp/adusbcim/&quot;&gt;USB CABLE CHECKER 2 (ADUSBCIM)&lt;/a&gt;
もついでに購入しました。&lt;/p&gt;

&lt;p&gt;RAMPOW は &lt;a href=&quot;https://rampow.com/&quot;&gt;Web サイト&lt;/a&gt; を見ても本社所在地や電話番号等が一切書かれておらず怪しげなメーカーという印象だったため、
ケーブルを使用する前に念の為 USB CABLE CHECKER 2 で確認しようという寸法です。
(※購入後に気付いたのですが、RAMPOW の
&lt;a href=&quot;https://www.amazon.co.jp/sp?_encoding=UTF8&amp;amp;seller=A2RPIWYAIJTBUL&quot;&gt;Amazon出品者プロフィール&lt;/a&gt;
に住所と電話番号が書かれていました。中国深センの会社のようです。)&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;amp;t=saasan-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=B0872MGDR2&amp;amp;linkId=fac28b4b22c51e4280bc86287fd8dd0a&amp;amp;bc1=000000&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;amp;t=saasan-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=B0827NDHBQ&amp;amp;linkId=bc50d175b4811fb8739a0a5d77f6be35&amp;amp;bc1=000000&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;amp;t=saasan-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=B07Y8BPVV4&amp;amp;linkId=b4348a77ed22af3503ea6572a01d34e9&amp;amp;bc1=000000&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;rampow-製ケーブル-rad03&quot;&gt;RAMPOW 製ケーブル RAD03&lt;/h2&gt;

&lt;p&gt;さっそく RAMPOW 製ケーブルを確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2020-07-19/rampow.jpg&quot;&gt;&lt;img src=&quot;/img/blog/2020-07-19/rampow.jpg&quot; alt=&quot;RAMPOW 製ケーブル RAD03&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;USB CABLE CHECKER 2 の表示は以下の通り。&lt;/p&gt;

&lt;pre&gt;GND+VBUS=188mΩ
CC:DOWN1K/E-MARKED
SHELL-GND SHORT(A&amp;amp;B)&lt;/pre&gt;

&lt;p&gt;表示の意味については
&lt;a href=&quot;https://github.com/bit-trade-one/USBCableChecker2/blob/master/README.md&quot;&gt;取扱説明書&lt;/a&gt;
に記載されています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[DOWN1K/E-MARKED]&lt;/p&gt;

  &lt;p&gt;Cプラグ内にGND-VCONN間に接続された1kΩの抵抗器を持ちます。&lt;/p&gt;

  &lt;p&gt;これにより接続先USB機器にEマーカーIC内蔵ケーブルということを通知します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[SHELL-GND SHORT(SIDE)]&lt;/p&gt;

  &lt;p&gt;プラグシェルがGNDと導通している場合表示されます。()内は導通している側のコネクタがA,Bどちらかを表します。&lt;/p&gt;

  &lt;p&gt;両側のコネクタが導通している場合はA&amp;amp;Bと表示されます。&lt;/p&gt;

  &lt;p&gt;なお、タイプC-Cケーブルでは規格でGNDとシェルが接続されることが定められています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;samp&gt;CC:DOWN1K/E-MARKED&lt;/samp&gt; は eMarker 内蔵、
&lt;samp&gt;SHELL-GND SHORT(A&amp;amp;B)&lt;/samp&gt; は両側のプラグシェルが GND と導通していることを示しています。&lt;/p&gt;

&lt;p&gt;eMarker が内蔵されているため 3A を超える電流が流せます。
connection のランプも全点灯しており、PD 3.0 / USB 3.1 Gen2 対応を謳うケーブルとして特に問題なさそうです。&lt;/p&gt;

&lt;h2 id=&quot;ravpower-製充電器-rp-pc128-付属ケーブル&quot;&gt;RAVPower 製充電器 RP-PC128 付属ケーブル&lt;/h2&gt;

&lt;p&gt;購入時に気付いてなかったのですが、
RP-PC128 にも 1.5m の Type-C ケーブルが付属していたためこれも確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2020-07-19/ravpower.jpg&quot;&gt;&lt;img src=&quot;/img/blog/2020-07-19/ravpower.jpg&quot; alt=&quot;RAVPower 製 90W USB PD 充電器 RP-PC128 付属ケーブル&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;GND+VBUS=170mΩ
CC:DOWN1K/E-MARKED
SHELL-GND SHORT(A&amp;amp;B)&lt;/pre&gt;

&lt;p&gt;eMarker が内蔵されているため 3A を超える電流が流せます。
connection のランプは USB 2.0 の部分と CC (Configuration Channel) が点灯しています。
USB 2.0 対応の PD ケーブルとして使えるようです。&lt;/p&gt;

&lt;p&gt;電源ケーブルとして使うならこれで十分ですね。
&lt;del&gt;RAMPOW のケーブルいらなかったのでは？&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;lenovo-yoga-book-c930-付属ケーブル&quot;&gt;Lenovo Yoga Book C930 付属ケーブル&lt;/h2&gt;

&lt;p&gt;手元にあったほかの USB Type-C ケーブルも確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2020-07-19/lenovo.jpg&quot;&gt;&lt;img src=&quot;/img/blog/2020-07-19/lenovo.jpg&quot; alt=&quot;Lenovo Yoga Book C930 付属ケーブル&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;GND+VBUS=212mΩ
SHELL-GND SHORT(A&amp;amp;B)&lt;/pre&gt;

&lt;p&gt;eMarker が内蔵されていないため 3A までの電流しか流せません。
connection のランプは USB 3.2 が一部点灯しています。&lt;/p&gt;

&lt;p&gt;USB 3.0, 3.1 では TX1/RX1 と TX2/RX2 のどちらかが繋がっていれば良いようです。
USB 3.2 Gen 2x2 では TX1, TX2, RX1, RX2 のすべてを使用してより高速な通信を行うため、このケーブルは利用できません。&lt;/p&gt;

&lt;p&gt;SBU (Sideband Use) は USB では使用されず、
DisplayPort 出力や Thunderbolt などの Alternate Mode に使われる信号線のようです。&lt;/p&gt;

&lt;p&gt;USB 3.1 対応の PD ケーブルとしては使えそう。&lt;/p&gt;

&lt;h2 id=&quot;one-netbook-onemix3s-付属ケーブル&quot;&gt;One-Netbook OneMix3S 付属ケーブル&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/img/blog/2020-07-19/onemix3s.jpg&quot;&gt;&lt;img src=&quot;/img/blog/2020-07-19/onemix3s.jpg&quot; alt=&quot;One-Netbook OneMix3S 付属ケーブル&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;GND+VBUS=225mΩ&lt;/pre&gt;

&lt;p&gt;&lt;samp&gt;SHELL-GND SHORT(A&amp;amp;B)&lt;/samp&gt; の表示がない……。
規格に従ってないケーブルのようです。
これは使わないほうがよさそう。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;RAVPower 製 90W USB PD 充電器 RP-PC128 と RAMPOW 製ケーブル RAD03 の組み合わせで、
65W を要求する Dell 製ノート PC が問題なく充電できました。&lt;/p&gt;

&lt;p&gt;RP-PC128 は MacBook 付属の 61W USB-C 充電器と比べて
サイズがひと回り小さい (65 x 65 x 32 mm) ため持ち運びやすく、
90W の大出力により充電できる機器の幅が広がります。&lt;/p&gt;

&lt;p&gt;また、電力に余裕があるため、BUFFALO の
5-in-1 ドッキングステーション LUD-U3-CGD/N
を間にはさんでも安定して動作しています
(61W 出力の PR-PC112 を使用したときは有線 LAN の通信がブツブツ切れていた)。
ケーブル1本で電源、ディスプレイ、有線 LAN、キーボードが繋がるのは便利です。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;amp;t=saasan-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=B081ZZGWR7&amp;amp;linkId=9a6e62087527f859adc8ac8b19af537f&amp;amp;bc1=000000&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;今回購入した RAMPOW 製ケーブルは問題ありませんでしたが、
手持ちの OneMix3S 付属ケーブルが規格違反だったのは意外でした。
USB Power Delivery では高電圧、大電流が流れるため、
ケーブル購入の際は信頼できるメーカーのものを選んだほうがよさそうです。&lt;/p&gt;

&lt;h2 id=&quot;参考サイト&quot;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bit-trade-one/USBCableChecker2/blob/master/README.md&quot;&gt;USBCableChecker2/README.md at master · bit-trade-one/USBCableChecker2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ascii.jp/elem/000/001/848/1848727/&quot;&gt;ASCII.jp：USB 4の発表で、USB 3.2はどうなった？ (1/5)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.4gamer.net/games/999/G999902/20190403022/&quot;&gt;USB 3.2とUSB4は従来のUSB規格から何が変わるのか？ 混乱しがちなUSBの最新事情を説明しよう - 4Gamer.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lab.fujiele.co.jp/articles/8968/&quot;&gt;USB Type-Cに置き換える方法 第1話 Type-Cの原理を知る | 組込み技術ラボ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 19 Jul 2020 09:00:00 +0900</pubDate>
        <link>https://saasan.github.io/blog/2020/07/19/usb-cable-checker-2%E3%81%A7usb-type-c%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E6%80%A7%E8%83%BD%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B.html</link>
        <guid isPermaLink="true">https://saasan.github.io/blog/2020/07/19/usb-cable-checker-2%E3%81%A7usb-type-c%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E6%80%A7%E8%83%BD%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
